
robotArmTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e0  080021e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021e8  080021e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  2000000c  080021fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  080021fc  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbb9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002014  00000000  00000000  0002dbf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000094a2  00000000  00000000  0002fc09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000008b0  00000000  00000000  000390b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001168  00000000  00000000  00039960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001584f  00000000  00000000  0003aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008f69  00000000  00000000  00050317  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00088a29  00000000  00000000  00059280  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000e1ca9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d2c  00000000  00000000  000e1d24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080021b0 	.word	0x080021b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080021b0 	.word	0x080021b0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2400      	movs	r4, #0
{
 80004dc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80004e2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80004ea:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <SystemClock_Config+0x88>)
 80004f0:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <SystemClock_Config+0x8c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80004fc:	6411      	str	r1, [r2, #64]	; 0x40
 80004fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000500:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000504:	9201      	str	r2, [sp, #4]
 8000506:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000508:	9402      	str	r4, [sp, #8]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000518:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051a:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000520:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000526:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000528:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 4;
 800052c:	2104      	movs	r1, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 800052e:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000530:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000534:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000536:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000538:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800053a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800053e:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f000 ff04 	bl	800134c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800054a:	a803      	add	r0, sp, #12
 800054c:	2103      	movs	r1, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000552:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000556:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000558:	f001 f90c 	bl	8001774 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800055c:	b015      	add	sp, #84	; 0x54
 800055e:	bd30      	pop	{r4, r5, pc}
 8000560:	40023800 	.word	0x40023800
 8000564:	40007000 	.word	0x40007000

08000568 <main>:
{
 8000568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2400      	movs	r4, #0
{
 800056e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8000570:	f000 fd64 	bl	800103c <HAL_Init>
  SystemClock_Config();
 8000574:	f7ff ffb0 	bl	80004d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800057c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000580:	4bc0      	ldr	r3, [pc, #768]	; (8000884 <main+0x31c>)
 8000582:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000588:	48bf      	ldr	r0, [pc, #764]	; (8000888 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800058a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 80008b0 <main+0x348>
  htim3.Instance = TIM3;
 800058e:	4ebf      	ldr	r6, [pc, #764]	; (800088c <main+0x324>)
  htim4.Instance = TIM4;
 8000590:	4dbf      	ldr	r5, [pc, #764]	; (8000890 <main+0x328>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	f042 0210 	orr.w	r2, r2, #16
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
 8000598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059a:	f002 0210 	and.w	r2, r2, #16
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	9402      	str	r4, [sp, #8]
 80005a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a6:	f042 0204 	orr.w	r2, r2, #4
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
 80005ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ae:	f002 0204 	and.w	r2, r2, #4
 80005b2:	9202      	str	r2, [sp, #8]
 80005b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	9403      	str	r4, [sp, #12]
 80005b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005be:	631a      	str	r2, [r3, #48]	; 0x30
 80005c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005c6:	9203      	str	r2, [sp, #12]
 80005c8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	9404      	str	r4, [sp, #16]
 80005cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ce:	f042 0201 	orr.w	r2, r2, #1
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f002 0201 	and.w	r2, r2, #1
 80005da:	9204      	str	r2, [sp, #16]
 80005dc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	9405      	str	r4, [sp, #20]
 80005e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e2:	f042 0202 	orr.w	r2, r2, #2
 80005e6:	631a      	str	r2, [r3, #48]	; 0x30
 80005e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ea:	f002 0202 	and.w	r2, r2, #2
 80005ee:	9205      	str	r2, [sp, #20]
 80005f0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	9406      	str	r4, [sp, #24]
 80005f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f6:	f042 0208 	orr.w	r2, r2, #8
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000602:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000604:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000606:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800060a:	f000 fe9b 	bl	8001344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	4611      	mov	r1, r2
 8000612:	48a0      	ldr	r0, [pc, #640]	; (8000894 <main+0x32c>)
 8000614:	f000 fe96 	bl	8001344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000618:	4622      	mov	r2, r4
 800061a:	2101      	movs	r1, #1
 800061c:	489e      	ldr	r0, [pc, #632]	; (8000898 <main+0x330>)
 800061e:	f000 fe91 	bl	8001344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000622:	4622      	mov	r2, r4
 8000624:	f64f 71d6 	movw	r1, #65494	; 0xffd6
 8000628:	489c      	ldr	r0, [pc, #624]	; (800089c <main+0x334>)
 800062a:	f000 fe8b 	bl	8001344 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800062e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000630:	a90d      	add	r1, sp, #52	; 0x34
 8000632:	4895      	ldr	r0, [pc, #596]	; (8000888 <main+0x320>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000634:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063c:	f000 fdac 	bl	8001198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000640:	2308      	movs	r3, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000642:	a90d      	add	r1, sp, #52	; 0x34
 8000644:	4890      	ldr	r0, [pc, #576]	; (8000888 <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800064e:	f000 fda3 	bl	8001198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000652:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000654:	a90d      	add	r1, sp, #52	; 0x34
 8000656:	488c      	ldr	r0, [pc, #560]	; (8000888 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800065a:	e9cd 280d 	strd	r2, r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065e:	f000 fd9b 	bl	8001198 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000662:	a90d      	add	r1, sp, #52	; 0x34
 8000664:	488b      	ldr	r0, [pc, #556]	; (8000894 <main+0x32c>)

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066a:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	e9cd 770d 	strd	r7, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000676:	f000 fd8f 	bl	8001198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800067a:	2308      	movs	r3, #8
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800067c:	a90d      	add	r1, sp, #52	; 0x34
 800067e:	4885      	ldr	r0, [pc, #532]	; (8000894 <main+0x32c>)
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000680:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800068a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800068e:	f000 fd83 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	a90d      	add	r1, sp, #52	; 0x34
 8000694:	4882      	ldr	r0, [pc, #520]	; (80008a0 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000698:	e9cd 780d 	strd	r7, r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f000 fd7c 	bl	8001198 <HAL_GPIO_Init>
  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a0:	f04f 0806 	mov.w	r8, #6
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006a4:	2210      	movs	r2, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006a6:	a90d      	add	r1, sp, #52	; 0x34
 80006a8:	487d      	ldr	r0, [pc, #500]	; (80008a0 <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006b4:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006b6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f000 fd6d 	bl	8001198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006be:	22e0      	movs	r2, #224	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	a90d      	add	r1, sp, #52	; 0x34
 80006c2:	4877      	ldr	r0, [pc, #476]	; (80008a0 <main+0x338>)
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006c4:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ca:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f000 fd61 	bl	8001198 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	a90d      	add	r1, sp, #52	; 0x34
 80006d8:	486f      	ldr	r0, [pc, #444]	; (8000898 <main+0x330>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	e9cd 770d 	strd	r7, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f000 fd59 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006e6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	a90d      	add	r1, sp, #52	; 0x34
 80006ec:	486a      	ldr	r0, [pc, #424]	; (8000898 <main+0x330>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ee:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006f8:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f000 fd4d 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           PD1 PD2 Audio_RST_Pin PD6 
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80006fe:	f64f 72d6 	movw	r2, #65494	; 0xffd6
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin|GPIO_PIN_6 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000702:	a90d      	add	r1, sp, #52	; 0x34
 8000704:	4865      	ldr	r0, [pc, #404]	; (800089c <main+0x334>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800070c:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070e:	f000 fd43 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000712:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	a90d      	add	r1, sp, #52	; 0x34
 8000718:	485e      	ldr	r0, [pc, #376]	; (8000894 <main+0x32c>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800071a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000724:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f000 fd37 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800072a:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800072e:	a90d      	add	r1, sp, #52	; 0x34
 8000730:	485b      	ldr	r0, [pc, #364]	; (80008a0 <main+0x338>)
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000732:	920d      	str	r2, [sp, #52]	; 0x34
  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000734:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800073c:	f000 fd2c 	bl	8001198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000740:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	a90d      	add	r1, sp, #52	; 0x34
 8000746:	4856      	ldr	r0, [pc, #344]	; (80008a0 <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000750:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000752:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f000 fd1f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800075a:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800075c:	a90d      	add	r1, sp, #52	; 0x34
 800075e:	484f      	ldr	r0, [pc, #316]	; (800089c <main+0x334>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000760:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f000 fd17 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SCL_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin;
 800076a:	f04f 0c40 	mov.w	ip, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 800076e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000770:	2212      	movs	r2, #18
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000772:	2304      	movs	r3, #4
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8000774:	4848      	ldr	r0, [pc, #288]	; (8000898 <main+0x330>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000776:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	e9cd 740f 	strd	r7, r4, [sp, #60]	; 0x3c
  htim3.Init.Period = 255;
 8000780:	f04f 0bff 	mov.w	fp, #255	; 0xff
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8000784:	f000 fd08 	bl	8001198 <HAL_GPIO_Init>
  htim3.Instance = TIM3;
 8000788:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <main+0x33c>)
 800078a:	6033      	str	r3, [r6, #0]
  htim3.Init.Prescaler = 12000;
 800078c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000790:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 12000;
 8000792:	6072      	str	r2, [r6, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	61b4      	str	r4, [r6, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80007a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80007aa:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80007ae:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80007b4:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	9408      	str	r4, [sp, #32]
  htim3.Init.Period = 255;
 80007b8:	f8c6 b00c 	str.w	fp, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007bc:	f001 f898 	bl	80018f0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c0:	a909      	add	r1, sp, #36	; 0x24
 80007c2:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c8:	f001 fa92 	bl	8001cf0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007cc:	4630      	mov	r0, r6
 80007ce:	f001 f8ef 	bl	80019b0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d2:	a907      	add	r1, sp, #28
 80007d4:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	f04f 0960 	mov.w	r9, #96	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007de:	f001 fbdf 	bl	8001fa0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	4622      	mov	r2, r4
 80007e4:	a90d      	add	r1, sp, #52	; 0x34
 80007e6:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ee:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	f001 f97f 	bl	8001af4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f6:	a90d      	add	r1, sp, #52	; 0x34
 80007f8:	2204      	movs	r2, #4
 80007fa:	4630      	mov	r0, r6
 80007fc:	f001 f97a 	bl	8001af4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8000800:	4630      	mov	r0, r6
 8000802:	f000 fa9f 	bl	8000d44 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000806:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <main+0x340>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000808:	9409      	str	r4, [sp, #36]	; 0x24
  htim4.Init.Prescaler = 4000;
 800080a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800080e:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 4000;
 8000810:	e9c5 2300 	strd	r2, r3, [r5]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000814:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000818:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000822:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8000826:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800082a:	9413      	str	r4, [sp, #76]	; 0x4c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	e9c5 4b02 	strd	r4, fp, [r5, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000834:	f001 f85c 	bl	80018f0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000838:	a909      	add	r1, sp, #36	; 0x24
 800083a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000840:	f001 fa56 	bl	8001cf0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000844:	4628      	mov	r0, r5
 8000846:	f001 f8b3 	bl	80019b0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800084a:	a907      	add	r1, sp, #28
 800084c:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000852:	f001 fba5 	bl	8001fa0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000856:	2208      	movs	r2, #8
 8000858:	a90d      	add	r1, sp, #52	; 0x34
 800085a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 800085c:	e9cd 940d 	strd	r9, r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000860:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000864:	f001 f946 	bl	8001af4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000868:	a90d      	add	r1, sp, #52	; 0x34
 800086a:	220c      	movs	r2, #12
 800086c:	4628      	mov	r0, r5
 800086e:	f001 f941 	bl	8001af4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8000872:	4628      	mov	r0, r5
 8000874:	f000 fa66 	bl	8000d44 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <main+0x344>)
 800087a:	f8df 9038 	ldr.w	r9, [pc, #56]	; 80008b4 <main+0x34c>
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	609c      	str	r4, [r3, #8]
 8000880:	e01a      	b.n	80008b8 <main+0x350>
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40021000 	.word	0x40021000
 800088c:	20000168 	.word	0x20000168
 8000890:	20000058 	.word	0x20000058
 8000894:	40020800 	.word	0x40020800
 8000898:	40020400 	.word	0x40020400
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40000800 	.word	0x40000800
 80008ac:	200001a8 	.word	0x200001a8
 80008b0:	10120000 	.word	0x10120000
 80008b4:	40011000 	.word	0x40011000
  huart1.Init.BaudRate = 115200;
 80008b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4618      	mov	r0, r3
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c0:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart1.Init.BaudRate = 115200;
 80008c8:	6059      	str	r1, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ca:	615a      	str	r2, [r3, #20]
  huart1.Instance = USART1;
 80008cc:	f8c3 9000 	str.w	r9, [r3]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d0:	f001 fba8 	bl	8002024 <HAL_UART_Init>
  SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
 80008d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80008d8:	f8df a288 	ldr.w	sl, [pc, #648]	; 8000b64 <main+0x5fc>
 80008dc:	f043 0320 	orr.w	r3, r3, #32
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80008e0:	4639      	mov	r1, r7
 80008e2:	4622      	mov	r2, r4
  SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
 80008e4:	f8c9 300c 	str.w	r3, [r9, #12]
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80008e8:	2025      	movs	r0, #37	; 0x25
 80008ea:	f000 fbf7 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ee:	2025      	movs	r0, #37	; 0x25
 80008f0:	f000 fc2a 	bl	8001148 <HAL_NVIC_EnableIRQ>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 128);
 80008f4:	6832      	ldr	r2, [r6, #0]
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 128);
 80008f6:	6829      	ldr	r1, [r5, #0]
			  TIM3->DIER |= TIM_DIER_CC1IE;
 80008f8:	4f95      	ldr	r7, [pc, #596]	; (8000b50 <main+0x5e8>)
 80008fa:	4c96      	ldr	r4, [pc, #600]	; (8000b54 <main+0x5ec>)
 80008fc:	4e96      	ldr	r6, [pc, #600]	; (8000b58 <main+0x5f0>)
 80008fe:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8000b68 <main+0x600>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 128);
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_Delay(10);
 8000906:	4640      	mov	r0, r8
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 128);
 8000908:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 128);
 800090a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_Delay(10);
 800090c:	f000 fbc2 	bl	8001094 <HAL_Delay>
 8000910:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8000b6c <main+0x604>
}

void motor_get_command(void)
{

	uint32_t motorCommandTempBuff[5]={0};
 8000914:	2500      	movs	r5, #0
 8000916:	e02f      	b.n	8000978 <main+0x410>
 8000918:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
	return (motor->headPointer - motor->tailPointer);
 800091c:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
		  if ((motorCommCount(&stepMotorCommand[i]) > 0) && (stepperMotors[i].state == 0))
 8000920:	4293      	cmp	r3, r2
 8000922:	d005      	beq.n	8000930 <main+0x3c8>
 8000924:	f896 b008 	ldrb.w	fp, [r6, #8]
 8000928:	f1bb 0f00 	cmp.w	fp, #0
 800092c:	f000 808c 	beq.w	8000a48 <main+0x4e0>
	return (motor->headPointer - motor->tailPointer);
 8000930:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
		  if ((motorCommCount(&stepMotorCommand[i]) > 0) && (stepperMotors[i].state == 0))
 8000934:	f8d4 2328 	ldr.w	r2, [r4, #808]	; 0x328
 8000938:	429a      	cmp	r2, r3
 800093a:	d005      	beq.n	8000948 <main+0x3e0>
 800093c:	f896 b014 	ldrb.w	fp, [r6, #20]
 8000940:	f1bb 0f00 	cmp.w	fp, #0
 8000944:	f000 8092 	beq.w	8000a6c <main+0x504>
	return (motor->headPointer - motor->tailPointer);
 8000948:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
		  if ((motorCommCount(&stepMotorCommand[i]) > 0) && (stepperMotors[i].state == 0))
 800094c:	f8d4 24c0 	ldr.w	r2, [r4, #1216]	; 0x4c0
 8000950:	429a      	cmp	r2, r3
 8000952:	d005      	beq.n	8000960 <main+0x3f8>
 8000954:	f896 b020 	ldrb.w	fp, [r6, #32]
 8000958:	f1bb 0f00 	cmp.w	fp, #0
 800095c:	f000 8099 	beq.w	8000a92 <main+0x52a>
	  localmotor1intFlag = motor1intFlag;
 8000960:	f8d9 1000 	ldr.w	r1, [r9]
	  localmotor2intFlag = motor2intFlag;
 8000964:	f8d8 2000 	ldr.w	r2, [r8]
	  localmotor3intFlag = motor3intFlag;
 8000968:	f8da 3000 	ldr.w	r3, [sl]
	  if (localmotor1intFlag==1)
 800096c:	2901      	cmp	r1, #1
 800096e:	d05e      	beq.n	8000a2e <main+0x4c6>
	  if (localmotor2intFlag==1)
 8000970:	2a01      	cmp	r2, #1
 8000972:	d03f      	beq.n	80009f4 <main+0x48c>
	  if (localmotor3intFlag==1)
 8000974:	2b01      	cmp	r3, #1
 8000976:	d04b      	beq.n	8000a10 <main+0x4a8>
	uint32_t motorCommandTempBuff[5]={0};
 8000978:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
 800097c:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
 8000980:	9511      	str	r5, [sp, #68]	; 0x44
	
	if (USART_BytesToRead() > 0 && (USART_BytesToRead() %5 == 0))
 8000982:	f000 fafd 	bl	8000f80 <USART_BytesToRead>
 8000986:	2800      	cmp	r0, #0
 8000988:	d0c6      	beq.n	8000918 <main+0x3b0>
 800098a:	f000 faf9 	bl	8000f80 <USART_BytesToRead>
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <main+0x5f4>)
 8000990:	fba3 2300 	umull	r2, r3, r3, r0
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800099a:	4298      	cmp	r0, r3
 800099c:	d1bc      	bne.n	8000918 <main+0x3b0>
 800099e:	f10d 0b34 	add.w	fp, sp, #52	; 0x34
	{
		uint32_t i;
		for (i=0; i < 5; i++)
		{
			motorCommandTempBuff[i] = (uint32_t)(USART_ReadByte());
 80009a2:	f000 fad1 	bl	8000f48 <USART_ReadByte>
 80009a6:	f84b 0b04 	str.w	r0, [fp], #4
		for (i=0; i < 5; i++)
 80009aa:	ab12      	add	r3, sp, #72	; 0x48
 80009ac:	455b      	cmp	r3, fp
 80009ae:	d1f8      	bne.n	80009a2 <main+0x43a>
		}

		if (motorCommandTempBuff[0] == '@')
 80009b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80009b2:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
 80009b6:	2b40      	cmp	r3, #64	; 0x40
 80009b8:	d1b0      	bne.n	800091c <main+0x3b4>
		{
			switch (motorCommandTempBuff[1])
 80009ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80009bc:	2b02      	cmp	r3, #2
 80009be:	f000 80ae 	beq.w	8000b1e <main+0x5b6>
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	f000 8092 	beq.w	8000aec <main+0x584>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d1a7      	bne.n	800091c <main+0x3b4>
			{

			case 1: 
			{
				stepMotorCommand[0].step[stepMotorCommand[0].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 80009cc:	e9dd 3010 	ldrd	r3, r0, [sp, #64]	; 0x40
 80009d0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80009d4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
				stepMotorCommand[0].dir[stepMotorCommand[0].headPointer] =	motorCommandTempBuff[2];
 80009d8:	f102 0032 	add.w	r0, r2, #50	; 0x32
				stepMotorCommand[0].headPointer++;
 80009dc:	3201      	adds	r2, #1
				if (stepMotorCommand[0].headPointer == BUFFER_SIZE)
 80009de:	2a32      	cmp	r2, #50	; 0x32
				stepMotorCommand[0].dir[stepMotorCommand[0].headPointer] =	motorCommandTempBuff[2];
 80009e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80009e2:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
				stepMotorCommand[0].headPointer++;
 80009e6:	bf12      	itee	ne
 80009e8:	f8c4 2190 	strne.w	r2, [r4, #400]	; 0x190
				{
					stepMotorCommand[0].headPointer = 0;
 80009ec:	f8c4 5190 	streq.w	r5, [r4, #400]	; 0x190
 80009f0:	2200      	moveq	r2, #0
 80009f2:	e793      	b.n	800091c <main+0x3b4>
		  if(stepperMotors[1].stepCounter == stepperMotors[1].step)
 80009f4:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
		  stepperMotors[1].stepCounter++;
 80009f8:	3201      	adds	r2, #1
		  if(stepperMotors[1].stepCounter == stepperMotors[1].step)
 80009fa:	428a      	cmp	r2, r1
		  motor2intFlag = 0;
 80009fc:	f8c8 5000 	str.w	r5, [r8]
		  stepperMotors[1].stepCounter++;
 8000a00:	6132      	str	r2, [r6, #16]
		  if(stepperMotors[1].stepCounter == stepperMotors[1].step)
 8000a02:	d059      	beq.n	8000ab8 <main+0x550>
			  TIM3->DIER |= TIM_DIER_CC2IE;
 8000a04:	68fa      	ldr	r2, [r7, #12]
	  if (localmotor3intFlag==1)
 8000a06:	2b01      	cmp	r3, #1
			  TIM3->DIER |= TIM_DIER_CC2IE;
 8000a08:	f042 0204 	orr.w	r2, r2, #4
 8000a0c:	60fa      	str	r2, [r7, #12]
	  if (localmotor3intFlag==1)
 8000a0e:	d1b3      	bne.n	8000978 <main+0x410>
		  if (stepperMotors[2].stepCounter == stepperMotors[2].step)
 8000a10:	e9d6 1306 	ldrd	r1, r3, [r6, #24]
		  stepperMotors[2].stepCounter++;
 8000a14:	3301      	adds	r3, #1
		  motor3intFlag = 0;
 8000a16:	2200      	movs	r2, #0
		  if (stepperMotors[2].stepCounter == stepperMotors[2].step)
 8000a18:	428b      	cmp	r3, r1
		  stepperMotors[2].stepCounter++;
 8000a1a:	61f3      	str	r3, [r6, #28]
		  motor3intFlag = 0;
 8000a1c:	f8ca 2000 	str.w	r2, [sl]
		  if (stepperMotors[2].stepCounter == stepperMotors[2].step)
 8000a20:	d05a      	beq.n	8000ad8 <main+0x570>
			  TIM4->DIER |= TIM_DIER_CC3IE;
 8000a22:	4a4f      	ldr	r2, [pc, #316]	; (8000b60 <main+0x5f8>)
 8000a24:	68d3      	ldr	r3, [r2, #12]
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	60d3      	str	r3, [r2, #12]
 8000a2c:	e772      	b.n	8000914 <main+0x3ac>
		  if(stepperMotors[0].stepCounter == stepperMotors[0].step)		// eger sayac istenilen adim sayisi kadar artmis ise
 8000a2e:	e9d6 0100 	ldrd	r0, r1, [r6]
		  stepperMotors[0].stepCounter++;			// her kesmede sayaci arttir.
 8000a32:	3101      	adds	r1, #1
		  if(stepperMotors[0].stepCounter == stepperMotors[0].step)		// eger sayac istenilen adim sayisi kadar artmis ise
 8000a34:	4281      	cmp	r1, r0
		  motor1intFlag = 0;
 8000a36:	f8c9 5000 	str.w	r5, [r9]
		  stepperMotors[0].stepCounter++;			// her kesmede sayaci arttir.
 8000a3a:	6071      	str	r1, [r6, #4]
		  if(stepperMotors[0].stepCounter == stepperMotors[0].step)		// eger sayac istenilen adim sayisi kadar artmis ise
 8000a3c:	d044      	beq.n	8000ac8 <main+0x560>
			  TIM3->DIER |= TIM_DIER_CC1IE;
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	f041 0102 	orr.w	r1, r1, #2
 8000a44:	60f9      	str	r1, [r7, #12]
 8000a46:	e793      	b.n	8000970 <main+0x408>
			stepperMotorMove(i, (uint8_t)(stepMotorCommand[i].dir[stepMotorCommand[i].tailPointer]), stepMotorCommand[i].step[stepMotorCommand[i].tailPointer]);
 8000a48:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8000a4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000a50:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
 8000a54:	4658      	mov	r0, fp
 8000a56:	f000 f88b 	bl	8000b70 <stepperMotorMove>
			stepMotorCommand[i].tailPointer++;
 8000a5a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8000a5e:	3301      	adds	r3, #1
 8000a60:	2b32      	cmp	r3, #50	; 0x32
 8000a62:	bf08      	it	eq
 8000a64:	465b      	moveq	r3, fp
 8000a66:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8000a6a:	e761      	b.n	8000930 <main+0x3c8>
			stepperMotorMove(i, (uint8_t)(stepMotorCommand[i].dir[stepMotorCommand[i].tailPointer]), stepMotorCommand[i].step[stepMotorCommand[i].tailPointer]);
 8000a6c:	f103 0266 	add.w	r2, r3, #102	; 0x66
 8000a70:	3398      	adds	r3, #152	; 0x98
 8000a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000a76:	f814 1023 	ldrb.w	r1, [r4, r3, lsl #2]
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 f878 	bl	8000b70 <stepperMotorMove>
			stepMotorCommand[i].tailPointer++;
 8000a80:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
 8000a84:	3301      	adds	r3, #1
 8000a86:	2b32      	cmp	r3, #50	; 0x32
 8000a88:	bf08      	it	eq
 8000a8a:	465b      	moveq	r3, fp
 8000a8c:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8000a90:	e75a      	b.n	8000948 <main+0x3e0>
			stepperMotorMove(i, (uint8_t)(stepMotorCommand[i].dir[stepMotorCommand[i].tailPointer]), stepMotorCommand[i].step[stepMotorCommand[i].tailPointer]);
 8000a92:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8000a96:	33fe      	adds	r3, #254	; 0xfe
 8000a98:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000a9c:	f814 1023 	ldrb.w	r1, [r4, r3, lsl #2]
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f000 f865 	bl	8000b70 <stepperMotorMove>
			stepMotorCommand[i].tailPointer++;
 8000aa6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8000aaa:	3301      	adds	r3, #1
 8000aac:	2b32      	cmp	r3, #50	; 0x32
 8000aae:	bf08      	it	eq
 8000ab0:	465b      	moveq	r3, fp
 8000ab2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
 8000ab6:	e753      	b.n	8000960 <main+0x3f8>
			  TIM3->CCER &= (~TIM_CCER_CC2E);
 8000ab8:	6a3a      	ldr	r2, [r7, #32]
			  stepperMotors[1].stepCounter = 0;
 8000aba:	6135      	str	r5, [r6, #16]
			  TIM3->CCER &= (~TIM_CCER_CC2E);
 8000abc:	f022 0210 	bic.w	r2, r2, #16
			  stepperMotors[1].state = 0;
 8000ac0:	7535      	strb	r5, [r6, #20]
			  stepperMotors[1].step = 0;
 8000ac2:	60f5      	str	r5, [r6, #12]
			  TIM3->CCER &= (~TIM_CCER_CC2E);
 8000ac4:	623a      	str	r2, [r7, #32]
 8000ac6:	e755      	b.n	8000974 <main+0x40c>
			  TIM3->CCER &= (~TIM_CCER_CC1E);
 8000ac8:	6a39      	ldr	r1, [r7, #32]
			  stepperMotors[0].stepCounter = 0;// bir sonraki komutta sayac sifirdan baslamali
 8000aca:	6075      	str	r5, [r6, #4]
			  TIM3->CCER &= (~TIM_CCER_CC1E);
 8000acc:	f021 0101 	bic.w	r1, r1, #1
			  stepperMotors[0].state = 0;	// step fonksiyonunun içindeki while döngüsünden çikilmasi için
 8000ad0:	7235      	strb	r5, [r6, #8]
			  TIM3->CCER &= (~TIM_CCER_CC1E);
 8000ad2:	6239      	str	r1, [r7, #32]
			  stepperMotors[0].step = 0;		   // durum degiskeni sifirlandi.
 8000ad4:	6035      	str	r5, [r6, #0]
 8000ad6:	e74b      	b.n	8000970 <main+0x408>
			  TIM4->CCER &= (~TIM_CCER_CC3E);
 8000ad8:	4921      	ldr	r1, [pc, #132]	; (8000b60 <main+0x5f8>)
			  stepperMotors[2].stepCounter = 0;
 8000ada:	61f2      	str	r2, [r6, #28]
			  TIM4->CCER &= (~TIM_CCER_CC3E);
 8000adc:	6a0b      	ldr	r3, [r1, #32]
			  stepperMotors[2].state = 0;
 8000ade:	f886 2020 	strb.w	r2, [r6, #32]
			  TIM4->CCER &= (~TIM_CCER_CC3E);
 8000ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
			  stepperMotors[2].step = 0;
 8000ae6:	61b2      	str	r2, [r6, #24]
			  TIM4->CCER &= (~TIM_CCER_CC3E);
 8000ae8:	620b      	str	r3, [r1, #32]
 8000aea:	e713      	b.n	8000914 <main+0x3ac>
				break;
			}
			
			case 3: 
			{
				stepMotorCommand[2].step[stepMotorCommand[2].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 8000aec:	e9dd 3010 	ldrd	r3, r0, [sp, #64]	; 0x40
 8000af0:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
 8000af4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
				stepMotorCommand[2].dir[stepMotorCommand[2].headPointer] =	motorCommandTempBuff[2];
				stepMotorCommand[2].headPointer++;
 8000af8:	f101 0e01 	add.w	lr, r1, #1
				stepMotorCommand[2].step[stepMotorCommand[2].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 8000afc:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
				stepMotorCommand[2].dir[stepMotorCommand[2].headPointer] =	motorCommandTempBuff[2];
 8000b00:	f101 0cfe 	add.w	ip, r1, #254	; 0xfe
				stepMotorCommand[2].headPointer++;
 8000b04:	f1be 0f32 	cmp.w	lr, #50	; 0x32
 8000b08:	bf0c      	ite	eq
 8000b0a:	4629      	moveq	r1, r5
 8000b0c:	4671      	movne	r1, lr
				stepMotorCommand[2].step[stepMotorCommand[2].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 8000b0e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
				stepMotorCommand[2].dir[stepMotorCommand[2].headPointer] =	motorCommandTempBuff[2];
 8000b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000b14:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
				stepMotorCommand[2].headPointer++;
 8000b18:	f8c4 14c0 	str.w	r1, [r4, #1216]	; 0x4c0
 8000b1c:	e6fe      	b.n	800091c <main+0x3b4>
				stepMotorCommand[1].step[stepMotorCommand[1].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 8000b1e:	e9dd 3010 	ldrd	r3, r0, [sp, #64]	; 0x40
 8000b22:	f8d4 c328 	ldr.w	ip, [r4, #808]	; 0x328
 8000b26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
				stepMotorCommand[1].headPointer++;
 8000b2a:	f10c 0e01 	add.w	lr, ip, #1
				stepMotorCommand[1].step[stepMotorCommand[1].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 8000b2e:	f10c 0066 	add.w	r0, ip, #102	; 0x66
				stepMotorCommand[1].headPointer++;
 8000b32:	f1be 0f32 	cmp.w	lr, #50	; 0x32
				stepMotorCommand[1].dir[stepMotorCommand[1].headPointer] =	motorCommandTempBuff[2];
 8000b36:	f10c 0c98 	add.w	ip, ip, #152	; 0x98
				stepMotorCommand[1].headPointer++;
 8000b3a:	bf0c      	ite	eq
 8000b3c:	4629      	moveq	r1, r5
 8000b3e:	4671      	movne	r1, lr
				stepMotorCommand[1].step[stepMotorCommand[1].headPointer] =	(motorCommandTempBuff[3] | (motorCommandTempBuff[4] << 8));
 8000b40:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
				stepMotorCommand[1].dir[stepMotorCommand[1].headPointer] =	motorCommandTempBuff[2];
 8000b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				stepMotorCommand[1].headPointer++;
 8000b46:	f8c4 1328 	str.w	r1, [r4, #808]	; 0x328
				stepMotorCommand[1].dir[stepMotorCommand[1].headPointer] =	motorCommandTempBuff[2];
 8000b4a:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
 8000b4e:	e6e5      	b.n	800091c <main+0x3b4>
 8000b50:	40000400 	.word	0x40000400
 8000b54:	200001e8 	.word	0x200001e8
 8000b58:	20000034 	.word	0x20000034
 8000b5c:	cccccccd 	.word	0xcccccccd
 8000b60:	40000800 	.word	0x40000800
 8000b64:	20000030 	.word	0x20000030
 8000b68:	20000028 	.word	0x20000028
 8000b6c:	2000002c 	.word	0x2000002c

08000b70 <stepperMotorMove>:
#include "stepperMotor.h"

void stepperMotorMove(uint32_t motorNumber, uint8_t direction, uint32_t step)  // step motor fonksiyonu. iki adet parametre alicak. Pals ve yön parametreleri
{
	switch (motorNumber)
 8000b70:	2801      	cmp	r0, #1
{
 8000b72:	b510      	push	{r4, lr}
	switch (motorNumber)
 8000b74:	d01e      	beq.n	8000bb4 <stepperMotorMove+0x44>
 8000b76:	d310      	bcc.n	8000b9a <stepperMotorMove+0x2a>
 8000b78:	2802      	cmp	r0, #2
 8000b7a:	d10d      	bne.n	8000b98 <stepperMotorMove+0x28>
		break;
	}
	
	case 2:
	{
		stepperMotors[2].step = step;
 8000b7c:	4c20      	ldr	r4, [pc, #128]	; (8000c00 <stepperMotorMove+0x90>)
 8000b7e:	61a2      	str	r2, [r4, #24]
		
		if(direction==0)
 8000b80:	b359      	cbz	r1, 8000bda <stepperMotorMove+0x6a>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_RESET);	// eger yön bilgisi sifir ise DIR pini lojik 0 yapildi.
		else if (direction==1)
 8000b82:	2901      	cmp	r1, #1
 8000b84:	d029      	beq.n	8000bda <stepperMotorMove+0x6a>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_SET);	// sifirdan farkli bir deger ise DIR pini lojik 1 yapildi.
		
		stepperMotors[2].state = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f884 3020 	strb.w	r3, [r4, #32]
		HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_3);
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	481d      	ldr	r0, [pc, #116]	; (8000c04 <stepperMotorMove+0x94>)
//		HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_4);
//		break;

	}

}
 8000b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_3);
 8000b94:	f000 bf6a 	b.w	8001a6c <HAL_TIM_PWM_Start_IT>
}
 8000b98:	bd10      	pop	{r4, pc}
		stepperMotors[0].step = step;
 8000b9a:	4c19      	ldr	r4, [pc, #100]	; (8000c00 <stepperMotorMove+0x90>)
 8000b9c:	6022      	str	r2, [r4, #0]
		if(direction==0)
 8000b9e:	b319      	cbz	r1, 8000be8 <stepperMotorMove+0x78>
		else if (direction==1)
 8000ba0:	2901      	cmp	r1, #1
 8000ba2:	d027      	beq.n	8000bf4 <stepperMotorMove+0x84>
		stepperMotors[0].state = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	7223      	strb	r3, [r4, #8]
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4817      	ldr	r0, [pc, #92]	; (8000c08 <stepperMotorMove+0x98>)
}
 8000bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8000bb0:	f000 bf5c 	b.w	8001a6c <HAL_TIM_PWM_Start_IT>
		stepperMotors[1].step = step;
 8000bb4:	4c12      	ldr	r4, [pc, #72]	; (8000c00 <stepperMotorMove+0x90>)
 8000bb6:	60e2      	str	r2, [r4, #12]
		if(direction==0)
 8000bb8:	b149      	cbz	r1, 8000bce <stepperMotorMove+0x5e>
		else if (direction==1)
 8000bba:	2901      	cmp	r1, #1
 8000bbc:	d007      	beq.n	8000bce <stepperMotorMove+0x5e>
		stepperMotors[1].state = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	7523      	strb	r3, [r4, #20]
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4810      	ldr	r0, [pc, #64]	; (8000c08 <stepperMotorMove+0x98>)
}
 8000bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8000bca:	f000 bf4f 	b.w	8001a6c <HAL_TIM_PWM_Start_IT>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);	// sifirdan farkli bir deger ise DIR pini lojik 1 yapildi.
 8000bce:	460a      	mov	r2, r1
 8000bd0:	480e      	ldr	r0, [pc, #56]	; (8000c0c <stepperMotorMove+0x9c>)
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	f000 fbb6 	bl	8001344 <HAL_GPIO_WritePin>
 8000bd8:	e7f1      	b.n	8000bbe <stepperMotorMove+0x4e>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_SET);	// sifirdan farkli bir deger ise DIR pini lojik 1 yapildi.
 8000bda:	460a      	mov	r2, r1
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <stepperMotorMove+0x9c>)
 8000bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be2:	f000 fbaf 	bl	8001344 <HAL_GPIO_WritePin>
 8000be6:	e7ce      	b.n	8000b86 <stepperMotorMove+0x16>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);	// eger yön bilgisi sifir ise DIR pini lojik 1 yapildi.
 8000be8:	2201      	movs	r2, #1
 8000bea:	2104      	movs	r1, #4
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <stepperMotorMove+0x9c>)
 8000bee:	f000 fba9 	bl	8001344 <HAL_GPIO_WritePin>
 8000bf2:	e7d7      	b.n	8000ba4 <stepperMotorMove+0x34>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_RESET);	// sifirdan farkli bir deger ise DIR pini lojik 0 yapildi.
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <stepperMotorMove+0x9c>)
 8000bfa:	f000 fba3 	bl	8001344 <HAL_GPIO_WritePin>
 8000bfe:	e7d1      	b.n	8000ba4 <stepperMotorMove+0x34>
 8000c00:	20000034 	.word	0x20000034
 8000c04:	20000058 	.word	0x20000058
 8000c08:	20000168 	.word	0x20000168
 8000c0c:	40020c00 	.word	0x40020c00

08000c10 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM3)
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000c12:	6803      	ldr	r3, [r0, #0]
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d012      	beq.n	8000c3e <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
			TIM3->DIER &= (~TIM_DIER_CC2IE);
			motor2intFlag = 1;
		}
	}

	if (htim->Instance == TIM4)
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d000      	beq.n	8000c20 <HAL_TIM_PWM_PulseFinishedCallback+0x10>
//			TIM4->DIER &= (~TIM_DIER_CC4IE);
//			motor4intFlag = 1;
//		}
	}

}
 8000c1e:	4770      	bx	lr
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000c20:	7f02      	ldrb	r2, [r0, #28]
 8000c22:	2a04      	cmp	r2, #4
 8000c24:	d1fb      	bne.n	8000c1e <HAL_TIM_PWM_PulseFinishedCallback+0xe>
			TIM4->SR &= (~TIM_SR_CC3IF);
 8000c26:	691a      	ldr	r2, [r3, #16]
			motor3intFlag = 1;
 8000c28:	4915      	ldr	r1, [pc, #84]	; (8000c80 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
			TIM4->SR &= (~TIM_SR_CC3IF);
 8000c2a:	f022 0208 	bic.w	r2, r2, #8
 8000c2e:	611a      	str	r2, [r3, #16]
			TIM4->DIER &= (~TIM_DIER_CC3IE);
 8000c30:	68da      	ldr	r2, [r3, #12]
			motor3intFlag = 1;
 8000c32:	2001      	movs	r0, #1
			TIM4->DIER &= (~TIM_DIER_CC3IE);
 8000c34:	f022 0208 	bic.w	r2, r2, #8
 8000c38:	60da      	str	r2, [r3, #12]
			motor3intFlag = 1;
 8000c3a:	6008      	str	r0, [r1, #0]
}
 8000c3c:	4770      	bx	lr
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c3e:	7f02      	ldrb	r2, [r0, #28]
 8000c40:	2a01      	cmp	r2, #1
 8000c42:	d00d      	beq.n	8000c60 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c44:	2a02      	cmp	r2, #2
 8000c46:	d1ea      	bne.n	8000c1e <HAL_TIM_PWM_PulseFinishedCallback+0xe>
			TIM3->SR &= (~TIM_SR_CC2IF);
 8000c48:	691a      	ldr	r2, [r3, #16]
			motor2intFlag = 1;
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
			TIM3->SR &= (~TIM_SR_CC2IF);
 8000c4c:	f022 0204 	bic.w	r2, r2, #4
 8000c50:	611a      	str	r2, [r3, #16]
			TIM3->DIER &= (~TIM_DIER_CC2IE);
 8000c52:	68da      	ldr	r2, [r3, #12]
			motor2intFlag = 1;
 8000c54:	2001      	movs	r0, #1
			TIM3->DIER &= (~TIM_DIER_CC2IE);
 8000c56:	f022 0204 	bic.w	r2, r2, #4
 8000c5a:	60da      	str	r2, [r3, #12]
			motor2intFlag = 1;
 8000c5c:	6008      	str	r0, [r1, #0]
 8000c5e:	4770      	bx	lr
			TIM3->SR &= (~TIM_SR_CC1IF);
 8000c60:	6919      	ldr	r1, [r3, #16]
			motor1intFlag = 1;
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
			TIM3->SR &= (~TIM_SR_CC1IF);
 8000c64:	f021 0102 	bic.w	r1, r1, #2
 8000c68:	6119      	str	r1, [r3, #16]
			TIM3->DIER &= (~TIM_DIER_CC1IE);
 8000c6a:	68d9      	ldr	r1, [r3, #12]
 8000c6c:	f021 0102 	bic.w	r1, r1, #2
 8000c70:	60d9      	str	r1, [r3, #12]
			motor1intFlag = 1;
 8000c72:	6002      	str	r2, [r0, #0]
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40000400 	.word	0x40000400
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	20000030 	.word	0x20000030
 8000c84:	2000002c 	.word	0x2000002c
 8000c88:	20000028 	.word	0x20000028

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x38>)
 8000c90:	2100      	movs	r1, #0
 8000c92:	9100      	str	r1, [sp, #0]
 8000c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c9a:	645a      	str	r2, [r3, #68]	; 0x44
 8000c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	9101      	str	r1, [sp, #4]
 8000ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000caa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cba:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cbe:	f000 b9fb 	b.w	80010b8 <HAL_NVIC_SetPriorityGrouping>
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b500      	push	{lr}
  if(htim_base->Instance==TIM3)
 8000cca:	6803      	ldr	r3, [r0, #0]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <HAL_TIM_Base_MspInit+0x70>)
 8000cce:	4293      	cmp	r3, r2
{
 8000cd0:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8000cd2:	d01b      	beq.n	8000d0c <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_TIM_Base_MspInit+0x74>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d002      	beq.n	8000ce0 <HAL_TIM_Base_MspInit+0x18>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cda:	b003      	add	sp, #12
 8000cdc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_TIM_Base_MspInit+0x78>)
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ce8:	f041 0104 	orr.w	r1, r1, #4
 8000cec:	6419      	str	r1, [r3, #64]	; 0x40
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cfc:	f000 f9ee 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d00:	201e      	movs	r0, #30
}
 8000d02:	b003      	add	sp, #12
 8000d04:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d08:	f000 ba1e 	b.w	8001148 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_TIM_Base_MspInit+0x78>)
 8000d10:	9200      	str	r2, [sp, #0]
 8000d12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d14:	f041 0102 	orr.w	r1, r1, #2
 8000d18:	6419      	str	r1, [r3, #64]	; 0x40
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d22:	4611      	mov	r1, r2
 8000d24:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d26:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d28:	f000 f9d8 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d2c:	201d      	movs	r0, #29
}
 8000d2e:	b003      	add	sp, #12
 8000d30:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d34:	f000 ba08 	b.w	8001148 <HAL_NVIC_EnableIRQ>
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40000800 	.word	0x40000800
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d44:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8000d46:	6802      	ldr	r2, [r0, #0]
 8000d48:	491d      	ldr	r1, [pc, #116]	; (8000dc0 <HAL_TIM_MspPostInit+0x7c>)
{
 8000d4a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8000d4e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000d54:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000d58:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8000d5a:	d01b      	beq.n	8000d94 <HAL_TIM_MspPostInit+0x50>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8000d5c:	4919      	ldr	r1, [pc, #100]	; (8000dc4 <HAL_TIM_MspPostInit+0x80>)
 8000d5e:	428a      	cmp	r2, r1
 8000d60:	d001      	beq.n	8000d66 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d62:	b008      	add	sp, #32
 8000d64:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_TIM_MspPostInit+0x84>)
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d7c:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d86:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f000 fa04 	bl	8001198 <HAL_GPIO_Init>
}
 8000d90:	b008      	add	sp, #32
 8000d92:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_TIM_MspPostInit+0x84>)
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000daa:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000db2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f000 f9ee 	bl	8001198 <HAL_GPIO_Init>
}
 8000dbc:	b008      	add	sp, #32
 8000dbe:	bd10      	pop	{r4, pc}
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40000800 	.word	0x40000800
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8000dd2:	6802      	ldr	r2, [r0, #0]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <HAL_UART_MspInit+0x90>)
{
 8000dd6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000dda:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000de0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000de4:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART1)
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000de8:	b009      	add	sp, #36	; 0x24
 8000dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dec:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000df0:	9400      	str	r4, [sp, #0]
 8000df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df6:	f042 0210 	orr.w	r2, r2, #16
 8000dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8000dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dfe:	f002 0210 	and.w	r2, r2, #16
 8000e02:	9200      	str	r2, [sp, #0]
 8000e04:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	9401      	str	r4, [sp, #4]
 8000e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e12:	f002 0201 	and.w	r2, r2, #1
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	9402      	str	r4, [sp, #8]
 8000e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1e:	f042 0202 	orr.w	r2, r2, #2
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e34:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3e:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f000 f9a9 	bl	8001198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e46:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	a903      	add	r1, sp, #12
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4e:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e54:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f000 f99f 	bl	8001198 <HAL_GPIO_Init>
}
 8000e5a:	b009      	add	sp, #36	; 0x24
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400

08000e6c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	e7fe      	b.n	8000e70 <HardFault_Handler>
 8000e72:	bf00      	nop

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler>
 8000e76:	bf00      	nop

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	e7fe      	b.n	8000e78 <BusFault_Handler>
 8000e7a:	bf00      	nop

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler>
 8000e7e:	bf00      	nop

08000e80 <SVC_Handler>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <DebugMon_Handler>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <PendSV_Handler>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 b8f0 	b.w	8001070 <HAL_IncTick>

08000e90 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e90:	4801      	ldr	r0, [pc, #4]	; (8000e98 <TIM3_IRQHandler+0x8>)
 8000e92:	f000 bfdb 	b.w	8001e4c <HAL_TIM_IRQHandler>
 8000e96:	bf00      	nop
 8000e98:	20000168 	.word	0x20000168

08000e9c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e9c:	4801      	ldr	r0, [pc, #4]	; (8000ea4 <TIM4_IRQHandler+0x8>)
 8000e9e:	f000 bfd5 	b.w	8001e4c <HAL_TIM_IRQHandler>
 8000ea2:	bf00      	nop
 8000ea4:	20000058 	.word	0x20000058

08000ea8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SystemInit+0x18>)
 8000eaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eba:	6099      	str	r1, [r3, #8]
#endif
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <USART1_IRQHandler>:
#include "uartDriver.h"

void USART1_IRQHandler(void){

	uint32_t usart1_isrflags = USART1->SR;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <USART1_IRQHandler+0x78>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
	uint32_t usart1_control_reg = USART1->CR1;
 8000ec8:	68d9      	ldr	r1, [r3, #12]

	if (((usart1_isrflags & USART_SR_RXNE) != RESET) && ((usart1_control_reg & USART_CR1_RXNEIE) != RESET))
 8000eca:	0690      	lsls	r0, r2, #26
 8000ecc:	d50f      	bpl.n	8000eee <USART1_IRQHandler+0x2a>
 8000ece:	0688      	lsls	r0, r1, #26
 8000ed0:	d50d      	bpl.n	8000eee <USART1_IRQHandler+0x2a>
	{
		uartBuffRX.buffer[uartBuffRX.headPointer++] = USART1->DR;
 8000ed2:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <USART1_IRQHandler+0x7c>)
 8000ed4:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
 8000ed8:	1c48      	adds	r0, r1, #1
 8000eda:	f8c2 00c8 	str.w	r0, [r2, #200]	; 0xc8
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		if(uartBuffRX.headPointer == BUFFER_SIZE)
 8000ee4:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8000ee8:	2b32      	cmp	r3, #50	; 0x32
 8000eea:	d01c      	beq.n	8000f26 <USART1_IRQHandler+0x62>

		return;
	}


}
 8000eec:	4770      	bx	lr
	if (((usart1_isrflags & USART_SR_TXE) != RESET) && ((usart1_control_reg & USART_CR1_TXEIE) != RESET))
 8000eee:	0612      	lsls	r2, r2, #24
 8000ef0:	d5fc      	bpl.n	8000eec <USART1_IRQHandler+0x28>
 8000ef2:	060b      	lsls	r3, r1, #24
 8000ef4:	d5fa      	bpl.n	8000eec <USART1_IRQHandler+0x28>
		if(uartBuffTX.headPointer != uartBuffTX.tailPointer)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <USART1_IRQHandler+0x80>)
 8000ef8:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8000efc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f00:	4291      	cmp	r1, r2
 8000f02:	d014      	beq.n	8000f2e <USART1_IRQHandler+0x6a>
			USART1->DR = uartBuffTX.buffer[uartBuffTX.tailPointer++];
 8000f04:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <USART1_IRQHandler+0x78>)
 8000f0a:	1c50      	adds	r0, r2, #1
 8000f0c:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 8000f10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f14:	604a      	str	r2, [r1, #4]
			if(uartBuffTX.tailPointer == BUFFER_SIZE)
 8000f16:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f1a:	2a32      	cmp	r2, #50	; 0x32
 8000f1c:	d1e6      	bne.n	8000eec <USART1_IRQHandler+0x28>
				uartBuffTX.tailPointer = 0;
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000f24:	4770      	bx	lr
			uartBuffRX.headPointer = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 8000f2c:	4770      	bx	lr
			CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE);
 8000f2e:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <USART1_IRQHandler+0x78>)
 8000f30:	68d3      	ldr	r3, [r2, #12]
 8000f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f36:	60d3      	str	r3, [r2, #12]
 8000f38:	e7d8      	b.n	8000eec <USART1_IRQHandler+0x28>
 8000f3a:	bf00      	nop
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	20000098 	.word	0x20000098
 8000f44:	200006b0 	.word	0x200006b0

08000f48 <USART_ReadByte>:
	SET_BIT(USART1->CR1, USART_CR1_TXEIE);
}

uint8_t USART_IsBuffEmpty(volatile uartBufferT* buffer){

	if(buffer->headPointer == buffer->tailPointer)
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <USART_ReadByte+0x34>)
 8000f4a:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8000f4e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d00f      	beq.n	8000f76 <USART_ReadByte+0x2e>
	{
		receivedByte = -1;
	}
	else
	{
		receivedByte = uartBuffRX.buffer[uartBuffRX.tailPointer++];
 8000f56:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f5a:	1c51      	adds	r1, r2, #1
 8000f5c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8000f60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

		if(uartBuffRX.tailPointer==BUFFER_SIZE)
 8000f64:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000f68:	2a32      	cmp	r2, #50	; 0x32
 8000f6a:	d000      	beq.n	8000f6e <USART_ReadByte+0x26>
			uartBuffRX.tailPointer = 0;
		}
	}

	return receivedByte;
}
 8000f6c:	4770      	bx	lr
			uartBuffRX.tailPointer = 0;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8000f74:	4770      	bx	lr
		receivedByte = -1;
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
	return receivedByte;
 8000f7a:	e7f7      	b.n	8000f6c <USART_ReadByte+0x24>
 8000f7c:	20000098 	.word	0x20000098

08000f80 <USART_BytesToRead>:

uint32_t USART_BytesToRead(){

	if(uartBuffRX.headPointer >= uartBuffRX.tailPointer)
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <USART_BytesToRead+0x1c>)
 8000f82:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8000f86:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
	{
		return (uartBuffRX.headPointer - uartBuffRX.tailPointer);
 8000f8a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8000f8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
	if(uartBuffRX.headPointer >= uartBuffRX.tailPointer)
 8000f92:	4291      	cmp	r1, r2
	}
	else
	{
		return(BUFFER_SIZE + (uartBuffRX.headPointer - uartBuffRX.tailPointer));
 8000f94:	bf38      	it	cc
 8000f96:	3032      	addcc	r0, #50	; 0x32
 8000f98:	1ac0      	subs	r0, r0, r3
	}
}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000098 	.word	0x20000098

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ff6d 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f001 f8cb 	bl	8002168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fac9 	bl	8000568 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	080021f0 	.word	0x080021f0
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000fe8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000fec:	20000784 	.word	0x20000784

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_InitTick+0x3c>)
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_InitTick+0x40>)
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
{
 8000ffe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001004:	fbb0 f0f2 	udiv	r0, r0, r2
 8001008:	fbb3 f0f0 	udiv	r0, r3, r0
 800100c:	f000 f8aa 	bl	8001164 <HAL_SYSTICK_Config>
 8001010:	b908      	cbnz	r0, 8001016 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	2d0f      	cmp	r5, #15
 8001014:	d901      	bls.n	800101a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001018:	bd38      	pop	{r3, r4, r5, pc}
 800101a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	4602      	mov	r2, r0
 800101e:	4629      	mov	r1, r5
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f85a 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_InitTick+0x44>)
 800102a:	4620      	mov	r0, r4
 800102c:	601d      	str	r5, [r3, #0]
}
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	20000004 	.word	0x20000004
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_Init>:
{
 800103c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x30>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001046:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800104e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001056:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f82d 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ffc8 	bl	8000ff4 <HAL_InitTick>
  HAL_MspInit();
 8001064:	f7ff fe12 	bl	8000c8c <HAL_MspInit>
}
 8001068:	2000      	movs	r0, #0
 800106a:	bd08      	pop	{r3, pc}
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_IncTick+0x10>)
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_IncTick+0x14>)
 8001074:	6811      	ldr	r1, [r2, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	440b      	add	r3, r1
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000780 	.word	0x20000780
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <HAL_GetTick+0x8>)
 800108a:	6818      	ldr	r0, [r3, #0]
}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000780 	.word	0x20000780

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff fff6 	bl	8001088 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800109e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80010a0:	d002      	beq.n	80010a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_Delay+0x20>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	1b40      	subs	r0, r0, r5
 80010ae:	42a0      	cmp	r0, r4
 80010b0:	d3fa      	bcc.n	80010a8 <HAL_Delay+0x14>
  {
  }
}
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010bc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80010c0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c2:	0200      	lsls	r0, r0, #8
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010d0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010d2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_NVIC_SetPriority+0x64>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e6:	f1c3 0507 	rsb	r5, r3, #7
 80010ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ec:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	bf28      	it	cs
 80010f2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f4:	2c06      	cmp	r4, #6
 80010f6:	d919      	bls.n	800112c <HAL_NVIC_SetPriority+0x50>
 80010f8:	3b03      	subs	r3, #3
 80010fa:	f04f 34ff 	mov.w	r4, #4294967295
 80010fe:	409c      	lsls	r4, r3
 8001100:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	40aa      	lsls	r2, r5
 800110a:	ea21 0102 	bic.w	r1, r1, r2
 800110e:	fa01 f203 	lsl.w	r2, r1, r3
 8001112:	4322      	orrs	r2, r4
 8001114:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8001116:	2800      	cmp	r0, #0
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	db0a      	blt.n	8001132 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001120:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001124:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001128:	bc30      	pop	{r4, r5}
 800112a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112c:	2400      	movs	r4, #0
 800112e:	4623      	mov	r3, r4
 8001130:	e7e8      	b.n	8001104 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_NVIC_SetPriority+0x68>)
 8001134:	f000 000f 	and.w	r0, r0, #15
 8001138:	4403      	add	r3, r0
 800113a:	761a      	strb	r2, [r3, #24]
 800113c:	bc30      	pop	{r4, r5}
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	e000ecfc 	.word	0xe000ecfc

08001148 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001148:	2800      	cmp	r0, #0
 800114a:	db07      	blt.n	800115c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114c:	f000 011f 	and.w	r1, r0, #31
 8001150:	2301      	movs	r3, #1
 8001152:	0940      	lsrs	r0, r0, #5
 8001154:	4a02      	ldr	r2, [pc, #8]	; (8001160 <HAL_NVIC_EnableIRQ+0x18>)
 8001156:	408b      	lsls	r3, r1
 8001158:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	3801      	subs	r0, #1
 8001166:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800116a:	d20e      	bcs.n	800118a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	4c08      	ldr	r4, [pc, #32]	; (8001194 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	20f0      	movs	r0, #240	; 0xf0
 8001176:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001188:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2001      	movs	r0, #1
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119c:	4688      	mov	r8, r1
 800119e:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a0:	f8d1 b000 	ldr.w	fp, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	f8df e198 	ldr.w	lr, [pc, #408]	; 8001340 <HAL_GPIO_Init+0x1a8>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a8:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 80011aa:	f04f 0901 	mov.w	r9, #1
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b0:	3401      	adds	r4, #1
 80011b2:	2c10      	cmp	r4, #16
 80011b4:	d077      	beq.n	80012a6 <HAL_GPIO_Init+0x10e>
    ioposition = 0x01U << position;
 80011b6:	fa09 f204 	lsl.w	r2, r9, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	ea0b 0302 	and.w	r3, fp, r2
    if(iocurrent == ioposition)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d1f6      	bne.n	80011b0 <HAL_GPIO_Init+0x18>
 80011c2:	e9d8 2601 	ldrd	r2, r6, [r8, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c6:	f022 0c10 	bic.w	ip, r2, #16
 80011ca:	0065      	lsls	r5, r4, #1
 80011cc:	f10c 37ff 	add.w	r7, ip, #4294967295
 80011d0:	2103      	movs	r1, #3
 80011d2:	40a9      	lsls	r1, r5
 80011d4:	2f01      	cmp	r7, #1
 80011d6:	ea6f 0101 	mvn.w	r1, r1
 80011da:	fa06 f605 	lsl.w	r6, r6, r5
 80011de:	d965      	bls.n	80012ac <HAL_GPIO_Init+0x114>
      temp = GPIOx->PUPDR;
 80011e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80011e6:	60c6      	str	r6, [r0, #12]
      temp = GPIOx->MODER;
 80011e8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ea:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	fa06 f505 	lsl.w	r5, r6, r5
 80011f4:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f6:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 80011f8:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	d5d9      	bpl.n	80011b0 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4d4b      	ldr	r5, [pc, #300]	; (800132c <HAL_GPIO_Init+0x194>)
 80011fe:	2100      	movs	r1, #0
 8001200:	9101      	str	r1, [sp, #4]
 8001202:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001204:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001208:	6469      	str	r1, [r5, #68]	; 0x44
 800120a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800120c:	f024 0603 	bic.w	r6, r4, #3
 8001210:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001214:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001218:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800121c:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121e:	f004 0503 	and.w	r5, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001224:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001226:	00ad      	lsls	r5, r5, #2
 8001228:	210f      	movs	r1, #15
 800122a:	40a9      	lsls	r1, r5
 800122c:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001230:	4f3f      	ldr	r7, [pc, #252]	; (8001330 <HAL_GPIO_Init+0x198>)
 8001232:	42b8      	cmp	r0, r7
 8001234:	d011      	beq.n	800125a <HAL_GPIO_Init+0xc2>
 8001236:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800123a:	42b8      	cmp	r0, r7
 800123c:	d068      	beq.n	8001310 <HAL_GPIO_Init+0x178>
 800123e:	4f3d      	ldr	r7, [pc, #244]	; (8001334 <HAL_GPIO_Init+0x19c>)
 8001240:	42b8      	cmp	r0, r7
 8001242:	d069      	beq.n	8001318 <HAL_GPIO_Init+0x180>
 8001244:	4f3c      	ldr	r7, [pc, #240]	; (8001338 <HAL_GPIO_Init+0x1a0>)
 8001246:	42b8      	cmp	r0, r7
 8001248:	d06b      	beq.n	8001322 <HAL_GPIO_Init+0x18a>
 800124a:	4f3c      	ldr	r7, [pc, #240]	; (800133c <HAL_GPIO_Init+0x1a4>)
 800124c:	42b8      	cmp	r0, r7
 800124e:	bf0c      	ite	eq
 8001250:	2704      	moveq	r7, #4
 8001252:	2707      	movne	r7, #7
 8001254:	fa07 f505 	lsl.w	r5, r7, r5
 8001258:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125a:	60b1      	str	r1, [r6, #8]
        temp = EXTI->IMR;
 800125c:	f8de 1000 	ldr.w	r1, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001260:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001262:	03d6      	lsls	r6, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8001264:	bf54      	ite	pl
 8001266:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001268:	4319      	orrmi	r1, r3
        }
        EXTI->IMR = temp;
 800126a:	f8ce 1000 	str.w	r1, [lr]

        temp = EXTI->EMR;
 800126e:	f8de 1004 	ldr.w	r1, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001272:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8001274:	bf54      	ite	pl
 8001276:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001278:	4319      	orrmi	r1, r3
        }
        EXTI->EMR = temp;
 800127a:	f8ce 1004 	str.w	r1, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	f8de 1008 	ldr.w	r1, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001282:	02d6      	lsls	r6, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8001284:	bf54      	ite	pl
 8001286:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8001288:	4319      	orrmi	r1, r3
        }
        EXTI->RTSR = temp;
 800128a:	f8ce 1008 	str.w	r1, [lr, #8]

        temp = EXTI->FTSR;
 800128e:	f8de 100c 	ldr.w	r1, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001292:	0292      	lsls	r2, r2, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001294:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8001298:	bf54      	ite	pl
 800129a:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 800129c:	4319      	orrmi	r1, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80012a0:	f8ce 100c 	str.w	r1, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a4:	d187      	bne.n	80011b6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80012a6:	b003      	add	sp, #12
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80012ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ae:	ea07 0a01 	and.w	sl, r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80012b6:	40af      	lsls	r7, r5
 80012b8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80012bc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012be:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c2:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c6:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ca:	40a7      	lsls	r7, r4
 80012cc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80012d0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80012d2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d4:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d6:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80012dc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012de:	d183      	bne.n	80011e8 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 80012e4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e8:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 80012ec:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f0:	00b6      	lsls	r6, r6, #2
 80012f2:	f04f 0c0f 	mov.w	ip, #15
 80012f6:	fa0c fc06 	lsl.w	ip, ip, r6
 80012fa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8001302:	fa07 f606 	lsl.w	r6, r7, r6
 8001306:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	f8ca 6020 	str.w	r6, [sl, #32]
 800130e:	e76b      	b.n	80011e8 <HAL_GPIO_Init+0x50>
 8001310:	fa09 f505 	lsl.w	r5, r9, r5
 8001314:	4329      	orrs	r1, r5
 8001316:	e7a0      	b.n	800125a <HAL_GPIO_Init+0xc2>
 8001318:	2702      	movs	r7, #2
 800131a:	fa07 f505 	lsl.w	r5, r7, r5
 800131e:	4329      	orrs	r1, r5
 8001320:	e79b      	b.n	800125a <HAL_GPIO_Init+0xc2>
 8001322:	2703      	movs	r7, #3
 8001324:	fa07 f505 	lsl.w	r5, r7, r5
 8001328:	4329      	orrs	r1, r5
 800132a:	e796      	b.n	800125a <HAL_GPIO_Init+0xc2>
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	b902      	cbnz	r2, 8001348 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001346:	0409      	lsls	r1, r1, #16
 8001348:	6181      	str	r1, [r0, #24]
  }
}
 800134a:	4770      	bx	lr

0800134c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 8132 	beq.w	80015b6 <HAL_RCC_OscConfig+0x26a>
{
 8001352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	6803      	ldr	r3, [r0, #0]
 8001358:	07dd      	lsls	r5, r3, #31
{
 800135a:	b082      	sub	sp, #8
 800135c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	d52f      	bpl.n	80013c0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001360:	49ac      	ldr	r1, [pc, #688]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 8001362:	688a      	ldr	r2, [r1, #8]
 8001364:	f002 020c 	and.w	r2, r2, #12
 8001368:	2a04      	cmp	r2, #4
 800136a:	f000 80ea 	beq.w	8001542 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	688a      	ldr	r2, [r1, #8]
 8001370:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001374:	2a08      	cmp	r2, #8
 8001376:	f000 80e0 	beq.w	800153a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137a:	6863      	ldr	r3, [r4, #4]
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	f000 80e9 	beq.w	8001556 <HAL_RCC_OscConfig+0x20a>
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001388:	f000 8178 	beq.w	800167c <HAL_RCC_OscConfig+0x330>
 800138c:	4da1      	ldr	r5, [pc, #644]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 800138e:	682a      	ldr	r2, [r5, #0]
 8001390:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001394:	602a      	str	r2, [r5, #0]
 8001396:	682a      	ldr	r2, [r5, #0]
 8001398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800139c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 80de 	bne.w	8001560 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fe70 	bl	8001088 <HAL_GetTick>
 80013a8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e005      	b.n	80013b8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fe6c 	bl	8001088 <HAL_GetTick>
 80013b0:	1b80      	subs	r0, r0, r6
 80013b2:	2864      	cmp	r0, #100	; 0x64
 80013b4:	f200 80f2 	bhi.w	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	039b      	lsls	r3, r3, #14
 80013bc:	d4f6      	bmi.n	80013ac <HAL_RCC_OscConfig+0x60>
 80013be:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c0:	079f      	lsls	r7, r3, #30
 80013c2:	d475      	bmi.n	80014b0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	071a      	lsls	r2, r3, #28
 80013c6:	d515      	bpl.n	80013f4 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c8:	6963      	ldr	r3, [r4, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80a5 	beq.w	800151a <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d0:	4b91      	ldr	r3, [pc, #580]	; (8001618 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	4d90      	ldr	r5, [pc, #576]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013d8:	f7ff fe56 	bl	8001088 <HAL_GetTick>
 80013dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e005      	b.n	80013ec <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fe52 	bl	8001088 <HAL_GetTick>
 80013e4:	1b80      	subs	r0, r0, r6
 80013e6:	2802      	cmp	r0, #2
 80013e8:	f200 80d8 	bhi.w	800159c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013ee:	079b      	lsls	r3, r3, #30
 80013f0:	d5f6      	bpl.n	80013e0 <HAL_RCC_OscConfig+0x94>
 80013f2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	0758      	lsls	r0, r3, #29
 80013f6:	d53b      	bpl.n	8001470 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f8:	4a86      	ldr	r2, [pc, #536]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 80013fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013fc:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001400:	f040 80db 	bne.w	80015ba <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001418:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4d80      	ldr	r5, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x2d0>)
 800141c:	682a      	ldr	r2, [r5, #0]
 800141e:	05d1      	lsls	r1, r2, #23
 8001420:	f140 80ac 	bpl.w	800157c <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	68a3      	ldr	r3, [r4, #8]
 8001426:	2b01      	cmp	r3, #1
 8001428:	f000 80c9 	beq.w	80015be <HAL_RCC_OscConfig+0x272>
 800142c:	2b05      	cmp	r3, #5
 800142e:	f000 812f 	beq.w	8001690 <HAL_RCC_OscConfig+0x344>
 8001432:	4d78      	ldr	r5, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 8001434:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	672a      	str	r2, [r5, #112]	; 0x70
 800143c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800143e:	f022 0204 	bic.w	r2, r2, #4
 8001442:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 80bf 	bne.w	80015c8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fe1d 	bl	8001088 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001452:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e006      	b.n	8001464 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fe17 	bl	8001088 <HAL_GetTick>
 800145a:	eba0 0008 	sub.w	r0, r0, r8
 800145e:	42b8      	cmp	r0, r7
 8001460:	f200 809c 	bhi.w	800159c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001464:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001466:	0798      	lsls	r0, r3, #30
 8001468:	d4f5      	bmi.n	8001456 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146a:	2e00      	cmp	r6, #0
 800146c:	f040 80dc 	bne.w	8001628 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001470:	69a0      	ldr	r0, [r4, #24]
 8001472:	b1c8      	cbz	r0, 80014a8 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001474:	4d67      	ldr	r5, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 8001476:	68aa      	ldr	r2, [r5, #8]
 8001478:	f002 020c 	and.w	r2, r2, #12
 800147c:	2a08      	cmp	r2, #8
 800147e:	f000 80d9 	beq.w	8001634 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4a67      	ldr	r2, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x2d4>)
 8001484:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001486:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001488:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148a:	f000 810b 	beq.w	80016a4 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fdfb 	bl	8001088 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001494:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e004      	b.n	80014a2 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fdf6 	bl	8001088 <HAL_GetTick>
 800149c:	1b40      	subs	r0, r0, r5
 800149e:	2802      	cmp	r0, #2
 80014a0:	d87c      	bhi.n	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	d4f7      	bmi.n	8001498 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
}
 80014aa:	b002      	add	sp, #8
 80014ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 80014b2:	6891      	ldr	r1, [r2, #8]
 80014b4:	f011 0f0c 	tst.w	r1, #12
 80014b8:	d024      	beq.n	8001504 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	6891      	ldr	r1, [r2, #8]
 80014bc:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c0:	2908      	cmp	r1, #8
 80014c2:	d01c      	beq.n	80014fe <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c4:	68e3      	ldr	r3, [r4, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8092 	beq.w	80015f0 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4d51      	ldr	r5, [pc, #324]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014d4:	f7ff fdd8 	bl	8001088 <HAL_GetTick>
 80014d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	e004      	b.n	80014e6 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fdd4 	bl	8001088 <HAL_GetTick>
 80014e0:	1b80      	subs	r0, r0, r6
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d85a      	bhi.n	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	0798      	lsls	r0, r3, #30
 80014ea:	d5f7      	bpl.n	80014dc <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	6922      	ldr	r2, [r4, #16]
 80014f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014f8:	602b      	str	r3, [r5, #0]
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	e762      	b.n	80013c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	6852      	ldr	r2, [r2, #4]
 8001500:	0256      	lsls	r6, r2, #9
 8001502:	d4df      	bmi.n	80014c4 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001504:	4a43      	ldr	r2, [pc, #268]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	0795      	lsls	r5, r2, #30
 800150a:	d54b      	bpl.n	80015a4 <HAL_RCC_OscConfig+0x258>
 800150c:	68e2      	ldr	r2, [r4, #12]
 800150e:	2a01      	cmp	r2, #1
 8001510:	d048      	beq.n	80015a4 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8001512:	2001      	movs	r0, #1
}
 8001514:	b002      	add	sp, #8
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4d3d      	ldr	r5, [pc, #244]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800151e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001520:	f7ff fdb2 	bl	8001088 <HAL_GetTick>
 8001524:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001526:	e004      	b.n	8001532 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fdae 	bl	8001088 <HAL_GetTick>
 800152c:	1b80      	subs	r0, r0, r6
 800152e:	2802      	cmp	r0, #2
 8001530:	d834      	bhi.n	800159c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001532:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001534:	079f      	lsls	r7, r3, #30
 8001536:	d4f7      	bmi.n	8001528 <HAL_RCC_OscConfig+0x1dc>
 8001538:	e75b      	b.n	80013f2 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153a:	684a      	ldr	r2, [r1, #4]
 800153c:	0250      	lsls	r0, r2, #9
 800153e:	f57f af1c 	bpl.w	800137a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	0391      	lsls	r1, r2, #14
 8001548:	f57f af3a 	bpl.w	80013c0 <HAL_RCC_OscConfig+0x74>
 800154c:	6862      	ldr	r2, [r4, #4]
 800154e:	2a00      	cmp	r2, #0
 8001550:	f47f af36 	bne.w	80013c0 <HAL_RCC_OscConfig+0x74>
 8001554:	e7dd      	b.n	8001512 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 8001558:	6813      	ldr	r3, [r2, #0]
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001560:	f7ff fd92 	bl	8001088 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001564:	4d2b      	ldr	r5, [pc, #172]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001566:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	e004      	b.n	8001574 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156a:	f7ff fd8d 	bl	8001088 <HAL_GetTick>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2864      	cmp	r0, #100	; 0x64
 8001572:	d813      	bhi.n	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	039a      	lsls	r2, r3, #14
 8001578:	d5f7      	bpl.n	800156a <HAL_RCC_OscConfig+0x21e>
 800157a:	e720      	b.n	80013be <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157c:	682a      	ldr	r2, [r5, #0]
 800157e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001582:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001584:	f7ff fd80 	bl	8001088 <HAL_GetTick>
 8001588:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	05da      	lsls	r2, r3, #23
 800158e:	f53f af49 	bmi.w	8001424 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff fd79 	bl	8001088 <HAL_GetTick>
 8001596:	1bc0      	subs	r0, r0, r7
 8001598:	2802      	cmp	r0, #2
 800159a:	d9f6      	bls.n	800158a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800159c:	2003      	movs	r0, #3
}
 800159e:	b002      	add	sp, #8
 80015a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	491b      	ldr	r1, [pc, #108]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 80015a6:	6920      	ldr	r0, [r4, #16]
 80015a8:	680a      	ldr	r2, [r1, #0]
 80015aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015ae:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80015b2:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b4:	e706      	b.n	80013c4 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
}
 80015b8:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2600      	movs	r6, #0
 80015bc:	e72d      	b.n	800141a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
 80015c0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80015c8:	f7ff fd5e 	bl	8001088 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	4d11      	ldr	r5, [pc, #68]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80015ce:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d4:	e005      	b.n	80015e2 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff fd57 	bl	8001088 <HAL_GetTick>
 80015da:	eba0 0008 	sub.w	r0, r0, r8
 80015de:	42b8      	cmp	r0, r7
 80015e0:	d8dc      	bhi.n	800159c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015e4:	079b      	lsls	r3, r3, #30
 80015e6:	d5f6      	bpl.n	80015d6 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	f43f af41 	beq.w	8001470 <HAL_RCC_OscConfig+0x124>
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4d08      	ldr	r5, [pc, #32]	; (8001614 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80015f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015f6:	f7ff fd47 	bl	8001088 <HAL_GetTick>
 80015fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fc:	e004      	b.n	8001608 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fd43 	bl	8001088 <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	2802      	cmp	r0, #2
 8001606:	d8c9      	bhi.n	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	0799      	lsls	r1, r3, #30
 800160c:	d4f7      	bmi.n	80015fe <HAL_RCC_OscConfig+0x2b2>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	e6d8      	b.n	80013c4 <HAL_RCC_OscConfig+0x78>
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	42470e80 	.word	0x42470e80
 800161c:	40007000 	.word	0x40007000
 8001620:	42470060 	.word	0x42470060
 8001624:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4a35      	ldr	r2, [pc, #212]	; (8001700 <HAL_RCC_OscConfig+0x3b4>)
 800162a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	e71d      	b.n	8001470 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	2801      	cmp	r0, #1
 8001636:	f43f af6d 	beq.w	8001514 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800163a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163c:	69e2      	ldr	r2, [r4, #28]
 800163e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001642:	4291      	cmp	r1, r2
 8001644:	f47f af65 	bne.w	8001512 <HAL_RCC_OscConfig+0x1c6>
 8001648:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800164a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	4291      	cmp	r1, r2
 8001650:	f47f af5f 	bne.w	8001512 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001654:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001658:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800165a:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800165c:	428a      	cmp	r2, r1
 800165e:	f47f af58 	bne.w	8001512 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001662:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001664:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001668:	4291      	cmp	r1, r2
 800166a:	f47f af52 	bne.w	8001512 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800166e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001670:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8001674:	1a18      	subs	r0, r3, r0
 8001676:	bf18      	it	ne
 8001678:	2001      	movne	r0, #1
 800167a:	e74b      	b.n	8001514 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_RCC_OscConfig+0x3b4>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e767      	b.n	8001560 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x3b4>)
 8001692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001694:	f042 0204 	orr.w	r2, r2, #4
 8001698:	671a      	str	r2, [r3, #112]	; 0x70
 800169a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	671a      	str	r2, [r3, #112]	; 0x70
 80016a2:	e791      	b.n	80015c8 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80016a4:	f7ff fcf0 	bl	8001088 <HAL_GetTick>
 80016a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	e005      	b.n	80016b8 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fcec 	bl	8001088 <HAL_GetTick>
 80016b0:	1b80      	subs	r0, r0, r6
 80016b2:	2802      	cmp	r0, #2
 80016b4:	f63f af72 	bhi.w	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	0199      	lsls	r1, r3, #6
 80016bc:	d4f6      	bmi.n	80016ac <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016be:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80016c2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80016c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	4c0d      	ldr	r4, [pc, #52]	; (8001700 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ca:	4333      	orrs	r3, r6
 80016cc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016d0:	0852      	lsrs	r2, r2, #1
 80016d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80016d6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80016d8:	490a      	ldr	r1, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80016de:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016e2:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80016e4:	f7ff fcd0 	bl	8001088 <HAL_GetTick>
 80016e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	e005      	b.n	80016f8 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fccc 	bl	8001088 <HAL_GetTick>
 80016f0:	1b40      	subs	r0, r0, r5
 80016f2:	2802      	cmp	r0, #2
 80016f4:	f63f af52 	bhi.w	800159c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	019a      	lsls	r2, r3, #6
 80016fc:	d5f6      	bpl.n	80016ec <HAL_RCC_OscConfig+0x3a0>
 80016fe:	e6d3      	b.n	80014a8 <HAL_RCC_OscConfig+0x15c>
 8001700:	40023800 	.word	0x40023800
 8001704:	42470060 	.word	0x42470060

08001708 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001708:	4917      	ldr	r1, [pc, #92]	; (8001768 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800170a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170c:	688b      	ldr	r3, [r1, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d01b      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0x46>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d117      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171c:	684b      	ldr	r3, [r1, #4]
 800171e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001722:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001726:	d114      	bne.n	8001752 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	6849      	ldr	r1, [r1, #4]
 800172a:	4810      	ldr	r0, [pc, #64]	; (800176c <HAL_RCC_GetSysClockFreq+0x64>)
 800172c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001730:	fba1 0100 	umull	r0, r1, r1, r0
 8001734:	f7fe fd50 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_GetSysClockFreq+0x60>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001740:	3301      	adds	r3, #1
 8001742:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001744:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001748:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800174c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001750:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001752:	684b      	ldr	r3, [r1, #4]
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_RCC_GetSysClockFreq+0x68>)
 8001756:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800175a:	fba3 0100 	umull	r0, r1, r3, r0
 800175e:	2300      	movs	r3, #0
 8001760:	f7fe fd3a 	bl	80001d8 <__aeabi_uldivmod>
 8001764:	e7e8      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x30>
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	00f42400 	.word	0x00f42400
 8001770:	007a1200 	.word	0x007a1200

08001774 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001774:	b160      	cbz	r0, 8001790 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001776:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_RCC_ClockConfig+0x128>)
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	428b      	cmp	r3, r1
 8001780:	d208      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	b2cb      	uxtb	r3, r1
 8001784:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	428b      	cmp	r3, r1
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
}
 8001792:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	6803      	ldr	r3, [r0, #0]
{
 8001796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179a:	079d      	lsls	r5, r3, #30
 800179c:	d514      	bpl.n	80017c8 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179e:	075c      	lsls	r4, r3, #29
 80017a0:	d504      	bpl.n	80017ac <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a2:	4c3f      	ldr	r4, [pc, #252]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 80017a4:	68a2      	ldr	r2, [r4, #8]
 80017a6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80017aa:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	071a      	lsls	r2, r3, #28
 80017ae:	d504      	bpl.n	80017ba <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4c3b      	ldr	r4, [pc, #236]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 80017b2:	68a2      	ldr	r2, [r4, #8]
 80017b4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80017b8:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ba:	4c39      	ldr	r4, [pc, #228]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 80017bc:	6885      	ldr	r5, [r0, #8]
 80017be:	68a2      	ldr	r2, [r4, #8]
 80017c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017c4:	432a      	orrs	r2, r5
 80017c6:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c8:	07df      	lsls	r7, r3, #31
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	d522      	bpl.n	8001816 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d0:	6842      	ldr	r2, [r0, #4]
 80017d2:	2a01      	cmp	r2, #1
 80017d4:	d057      	beq.n	8001886 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	1e93      	subs	r3, r2, #2
 80017d8:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	d959      	bls.n	8001894 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	0799      	lsls	r1, r3, #30
 80017e2:	d525      	bpl.n	8001830 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e4:	4e2e      	ldr	r6, [pc, #184]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 80017e6:	68b3      	ldr	r3, [r6, #8]
 80017e8:	f023 0303 	bic.w	r3, r3, #3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc4a 	bl	8001088 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80017f8:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	e005      	b.n	8001808 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fc:	f7ff fc44 	bl	8001088 <HAL_GetTick>
 8001800:	eba0 0008 	sub.w	r0, r0, r8
 8001804:	42b8      	cmp	r0, r7
 8001806:	d843      	bhi.n	8001890 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001808:	68b3      	ldr	r3, [r6, #8]
 800180a:	6862      	ldr	r2, [r4, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001814:	d1f2      	bne.n	80017fc <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001816:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_RCC_ClockConfig+0x128>)
 8001818:	6813      	ldr	r3, [r2, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	42ab      	cmp	r3, r5
 8001820:	d909      	bls.n	8001836 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	b2eb      	uxtb	r3, r5
 8001824:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	42ab      	cmp	r3, r5
 800182e:	d002      	beq.n	8001836 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
}
 8001832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	075a      	lsls	r2, r3, #29
 800183a:	d506      	bpl.n	800184a <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4918      	ldr	r1, [pc, #96]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 800183e:	68e0      	ldr	r0, [r4, #12]
 8001840:	688a      	ldr	r2, [r1, #8]
 8001842:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001846:	4302      	orrs	r2, r0
 8001848:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	071b      	lsls	r3, r3, #28
 800184c:	d412      	bmi.n	8001874 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f7ff ff5b 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 8001854:	4c13      	ldr	r4, [pc, #76]	; (80018a4 <HAL_RCC_ClockConfig+0x130>)
 8001856:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8001858:	4913      	ldr	r1, [pc, #76]	; (80018a8 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_RCC_ClockConfig+0x138>)
 800185c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001860:	5ce3      	ldrb	r3, [r4, r3]
 8001862:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8001866:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001868:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800186a:	f7ff fbc3 	bl	8000ff4 <HAL_InitTick>
  return HAL_OK;
 800186e:	2000      	movs	r0, #0
}
 8001870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 8001876:	6921      	ldr	r1, [r4, #16]
 8001878:	6893      	ldr	r3, [r2, #8]
 800187a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800187e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001882:	6093      	str	r3, [r2, #8]
 8001884:	e7e3      	b.n	800184e <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_ClockConfig+0x12c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	039e      	lsls	r6, r3, #14
 800188c:	d4aa      	bmi.n	80017e4 <HAL_RCC_ClockConfig+0x70>
 800188e:	e7cf      	b.n	8001830 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001890:	2003      	movs	r0, #3
 8001892:	e7ed      	b.n	8001870 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	0198      	lsls	r0, r3, #6
 8001896:	d4a5      	bmi.n	80017e4 <HAL_RCC_ClockConfig+0x70>
 8001898:	e7ca      	b.n	8001830 <HAL_RCC_ClockConfig+0xbc>
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	080021c8 	.word	0x080021c8
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000000 	.word	0x20000000

080018b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018b4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80018b6:	4905      	ldr	r1, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018bc:	6808      	ldr	r0, [r1, #0]
 80018be:	5cd3      	ldrb	r3, [r2, r3]
}
 80018c0:	40d8      	lsrs	r0, r3
 80018c2:	4770      	bx	lr
 80018c4:	40023800 	.word	0x40023800
 80018c8:	080021d8 	.word	0x080021d8
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80018d6:	4905      	ldr	r1, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018d8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018dc:	6808      	ldr	r0, [r1, #0]
 80018de:	5cd3      	ldrb	r3, [r2, r3]
}
 80018e0:	40d8      	lsrs	r0, r3
 80018e2:	4770      	bx	lr
 80018e4:	40023800 	.word	0x40023800
 80018e8:	080021d8 	.word	0x080021d8
 80018ec:	20000000 	.word	0x20000000

080018f0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d046      	beq.n	8001982 <HAL_TIM_Base_Init+0x92>
{
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018fa:	4604      	mov	r4, r0
 80018fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001900:	b333      	cbz	r3, 8001950 <HAL_TIM_Base_Init+0x60>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001902:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	4d28      	ldr	r5, [pc, #160]	; (80019a8 <HAL_TIM_Base_Init+0xb8>)
 8001906:	69a6      	ldr	r6, [r4, #24]
 8001908:	68e0      	ldr	r0, [r4, #12]
 800190a:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	2302      	movs	r3, #2
 800190e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001912:	42aa      	cmp	r2, r5
  tmpcr1 = TIMx->CR1;
 8001914:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001916:	d036      	beq.n	8001986 <HAL_TIM_Base_Init+0x96>
 8001918:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800191c:	d01d      	beq.n	800195a <HAL_TIM_Base_Init+0x6a>
 800191e:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8001922:	42aa      	cmp	r2, r5
 8001924:	d019      	beq.n	800195a <HAL_TIM_Base_Init+0x6a>
 8001926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800192a:	42aa      	cmp	r2, r5
 800192c:	d015      	beq.n	800195a <HAL_TIM_Base_Init+0x6a>
 800192e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001932:	42aa      	cmp	r2, r5
 8001934:	d011      	beq.n	800195a <HAL_TIM_Base_Init+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001936:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800193a:	42aa      	cmp	r2, r5
 800193c:	d011      	beq.n	8001962 <HAL_TIM_Base_Init+0x72>
 800193e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001942:	42aa      	cmp	r2, r5
 8001944:	d00d      	beq.n	8001962 <HAL_TIM_Base_Init+0x72>
 8001946:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800194a:	42aa      	cmp	r2, r5
 800194c:	d10d      	bne.n	800196a <HAL_TIM_Base_Init+0x7a>
 800194e:	e008      	b.n	8001962 <HAL_TIM_Base_Init+0x72>
    htim->Lock = HAL_UNLOCKED;
 8001950:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001954:	f7ff f9b8 	bl	8000cc8 <HAL_TIM_Base_MspInit>
 8001958:	e7d3      	b.n	8001902 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800195a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800195c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001960:	432b      	orrs	r3, r5
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001962:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001968:	432b      	orrs	r3, r5
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800196a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800196e:	4333      	orrs	r3, r6

  TIMx->CR1 = tmpcr1;
 8001970:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001972:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001974:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001976:	2301      	movs	r3, #1
 8001978:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800197a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800197c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
}
 8001984:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001986:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001988:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800198e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8001990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001994:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800199a:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 800199c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800199e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80019a0:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80019a2:	6963      	ldr	r3, [r4, #20]
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	e7e6      	b.n	8001976 <HAL_TIM_Base_Init+0x86>
 80019a8:	40010000 	.word	0x40010000

080019ac <HAL_TIM_PWM_MspInit>:
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d046      	beq.n	8001a42 <HAL_TIM_PWM_Init+0x92>
{
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80019b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019ba:	4604      	mov	r4, r0
 80019bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019c0:	b333      	cbz	r3, 8001a10 <HAL_TIM_PWM_Init+0x60>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019c4:	4d28      	ldr	r5, [pc, #160]	; (8001a68 <HAL_TIM_PWM_Init+0xb8>)
 80019c6:	69a6      	ldr	r6, [r4, #24]
 80019c8:	68e0      	ldr	r0, [r4, #12]
 80019ca:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019d2:	42aa      	cmp	r2, r5
  tmpcr1 = TIMx->CR1;
 80019d4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019d6:	d036      	beq.n	8001a46 <HAL_TIM_PWM_Init+0x96>
 80019d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80019dc:	d01d      	beq.n	8001a1a <HAL_TIM_PWM_Init+0x6a>
 80019de:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 80019e2:	42aa      	cmp	r2, r5
 80019e4:	d019      	beq.n	8001a1a <HAL_TIM_PWM_Init+0x6a>
 80019e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ea:	42aa      	cmp	r2, r5
 80019ec:	d015      	beq.n	8001a1a <HAL_TIM_PWM_Init+0x6a>
 80019ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019f2:	42aa      	cmp	r2, r5
 80019f4:	d011      	beq.n	8001a1a <HAL_TIM_PWM_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019f6:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80019fa:	42aa      	cmp	r2, r5
 80019fc:	d011      	beq.n	8001a22 <HAL_TIM_PWM_Init+0x72>
 80019fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a02:	42aa      	cmp	r2, r5
 8001a04:	d00d      	beq.n	8001a22 <HAL_TIM_PWM_Init+0x72>
 8001a06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0a:	42aa      	cmp	r2, r5
 8001a0c:	d10d      	bne.n	8001a2a <HAL_TIM_PWM_Init+0x7a>
 8001a0e:	e008      	b.n	8001a22 <HAL_TIM_PWM_Init+0x72>
    htim->Lock = HAL_UNLOCKED;
 8001a10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a14:	f7ff ffca 	bl	80019ac <HAL_TIM_PWM_MspInit>
 8001a18:	e7d3      	b.n	80019c2 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8001a1a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a20:	432b      	orrs	r3, r5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a22:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a28:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2e:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8001a30:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a32:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a34:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001a36:	2301      	movs	r3, #1
 8001a38:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8001a3a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
}
 8001a44:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001a46:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a48:	6925      	ldr	r5, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a4e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a54:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a5a:	4333      	orrs	r3, r6
  TIMx->CR1 = tmpcr1;
 8001a5c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a5e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a60:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001a62:	6963      	ldr	r3, [r4, #20]
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	e7e6      	b.n	8001a36 <HAL_TIM_PWM_Init+0x86>
 8001a68:	40010000 	.word	0x40010000

08001a6c <HAL_TIM_PWM_Start_IT>:
 8001a6c:	b410      	push	{r4}
 8001a6e:	6803      	ldr	r3, [r0, #0]
 8001a70:	290c      	cmp	r1, #12
 8001a72:	d80c      	bhi.n	8001a8e <HAL_TIM_PWM_Start_IT+0x22>
 8001a74:	e8df f001 	tbb	[pc, r1]
 8001a78:	0b0b0b31 	.word	0x0b0b0b31
 8001a7c:	0b0b0b2c 	.word	0x0b0b0b2c
 8001a80:	0b0b0b27 	.word	0x0b0b0b27
 8001a84:	07          	.byte	0x07
 8001a85:	00          	.byte	0x00
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	f042 0210 	orr.w	r2, r2, #16
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	6a18      	ldr	r0, [r3, #32]
 8001a90:	4c17      	ldr	r4, [pc, #92]	; (8001af0 <HAL_TIM_PWM_Start_IT+0x84>)
 8001a92:	f001 021f 	and.w	r2, r1, #31
 8001a96:	2101      	movs	r1, #1
 8001a98:	4091      	lsls	r1, r2
 8001a9a:	ea20 0001 	bic.w	r0, r0, r1
 8001a9e:	6218      	str	r0, [r3, #32]
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	42a3      	cmp	r3, r4
 8001aa4:	ea41 0102 	orr.w	r1, r1, r2
 8001aa8:	6219      	str	r1, [r3, #32]
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_TIM_PWM_Start_IT+0x78>
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	f002 0207 	and.w	r2, r2, #7
 8001ab2:	2a06      	cmp	r2, #6
 8001ab4:	d003      	beq.n	8001abe <HAL_TIM_PWM_Start_IT+0x52>
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	f042 0208 	orr.w	r2, r2, #8
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	e7de      	b.n	8001a8e <HAL_TIM_PWM_Start_IT+0x22>
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	f042 0204 	orr.w	r2, r2, #4
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	e7d9      	b.n	8001a8e <HAL_TIM_PWM_Start_IT+0x22>
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	e7d4      	b.n	8001a8e <HAL_TIM_PWM_Start_IT+0x22>
 8001ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
 8001aec:	e7de      	b.n	8001aac <HAL_TIM_PWM_Start_IT+0x40>
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000

08001af4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8001af4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f000 80c8 	beq.w	8001c8e <HAL_TIM_PWM_ConfigChannel+0x19a>
{
 8001afe:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001b02:	2401      	movs	r4, #1
 8001b04:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8001b0c:	2a0c      	cmp	r2, #12
 8001b0e:	d837      	bhi.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8001b10:	e8df f002 	tbb	[pc, r2]
 8001b14:	3636363e 	.word	0x3636363e
 8001b18:	36363668 	.word	0x36363668
 8001b1c:	36363693 	.word	0x36363693
 8001b20:	07          	.byte	0x07
 8001b21:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b22:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b24:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b26:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b28:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2a:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8001cec <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b2e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8001b32:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001b34:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001b36:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001b3a:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b40:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b44:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b46:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b4a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b4e:	d104      	bne.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x66>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b50:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b52:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b56:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b5a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b5c:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001b60:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001b62:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b64:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b66:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b68:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b6a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8001b6e:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b70:	69d9      	ldr	r1, [r3, #28]
 8001b72:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001b76:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001b7e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8001b80:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b82:	2201      	movs	r2, #1
 8001b84:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b8c:	4618      	mov	r0, r3
}
 8001b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b90:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8001b92:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b96:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001b98:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b9a:	4e54      	ldr	r6, [pc, #336]	; (8001cec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b9c:	f025 0501 	bic.w	r5, r5, #1
 8001ba0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001ba4:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ba8:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8001baa:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bb2:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8001bb4:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8001bb8:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bbc:	d078      	beq.n	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
  TIMx->CCR1 = OC_Config->Pulse;
 8001bbe:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001bc0:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001bc4:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001bc6:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001bc8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bca:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bcc:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bce:	f044 0408 	orr.w	r4, r4, #8
 8001bd2:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bd4:	6999      	ldr	r1, [r3, #24]
 8001bd6:	f021 0104 	bic.w	r1, r1, #4
 8001bda:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	432a      	orrs	r2, r5
 8001be0:	619a      	str	r2, [r3, #24]
      break;
 8001be2:	e7cd      	b.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x8c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001be4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001be6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bea:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001bec:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8001cec <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bf0:	f025 0510 	bic.w	r5, r5, #16
 8001bf4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001bf8:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001bfc:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8001bfe:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c02:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c06:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c08:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c0c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c10:	d05c      	beq.n	8001ccc <HAL_TIM_PWM_ConfigChannel+0x1d8>
  TIMx->CCR2 = OC_Config->Pulse;
 8001c12:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c14:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c18:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c1a:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001c1c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c1e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c20:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c22:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8001c26:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c28:	6999      	ldr	r1, [r3, #24]
 8001c2a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001c2e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001c36:	619a      	str	r2, [r3, #24]
      break;
 8001c38:	e7a2      	b.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x8c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c3a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c3c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c3e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001c40:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c42:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8001cec <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c46:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8001c4a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001c4e:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c52:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c58:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c5c:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c5e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8001c62:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c66:	d014      	beq.n	8001c92 <HAL_TIM_PWM_ConfigChannel+0x19e>
  TIMx->CCR3 = OC_Config->Pulse;
 8001c68:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c6a:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c6e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c70:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001c72:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c74:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c76:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c78:	f044 0408 	orr.w	r4, r4, #8
 8001c7c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c7e:	69d9      	ldr	r1, [r3, #28]
 8001c80:	f021 0104 	bic.w	r1, r1, #4
 8001c84:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	432a      	orrs	r2, r5
 8001c8a:	61da      	str	r2, [r3, #28]
      break;
 8001c8c:	e778      	b.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x8c>
  __HAL_LOCK(htim);
 8001c8e:	2002      	movs	r0, #2
}
 8001c90:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c92:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c96:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c9c:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ca0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ca4:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001caa:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8001cae:	e7db      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x174>
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cb0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8001cb4:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cb6:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cba:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8001cbe:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cc0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cc2:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cc6:	ea45 0c0c 	orr.w	ip, r5, ip
 8001cca:	e778      	b.n	8001bbe <HAL_TIM_PWM_ConfigChannel+0xca>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ccc:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cd0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cd6:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cda:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cde:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ce4:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8001ce8:	e793      	b.n	8001c12 <HAL_TIM_PWM_ConfigChannel+0x11e>
 8001cea:	bf00      	nop
 8001cec:	40010000 	.word	0x40010000

08001cf0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001cf0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d05a      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8001cfa:	6803      	ldr	r3, [r0, #0]
{
 8001cfc:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d02:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d04:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d06:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d0a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8001d0e:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8001d10:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8001d12:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8001d16:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d18:	d074      	beq.n	8001e04 <HAL_TIM_ConfigClockSource+0x114>
 8001d1a:	d94a      	bls.n	8001db2 <HAL_TIM_ConfigClockSource+0xc2>
 8001d1c:	2c60      	cmp	r4, #96	; 0x60
 8001d1e:	d02d      	beq.n	8001d7c <HAL_TIM_ConfigClockSource+0x8c>
 8001d20:	d956      	bls.n	8001dd0 <HAL_TIM_ConfigClockSource+0xe0>
 8001d22:	2c70      	cmp	r4, #112	; 0x70
 8001d24:	d01a      	beq.n	8001d5c <HAL_TIM_ConfigClockSource+0x6c>
 8001d26:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8001d2a:	d10e      	bne.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d2c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001d30:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001d32:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d34:	432a      	orrs	r2, r5
 8001d36:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d3e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d40:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d48:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8001d4a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001d58:	4618      	mov	r0, r3
}
 8001d5a:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d5c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001d60:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001d62:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d64:	432a      	orrs	r2, r5
 8001d66:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d6e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001d70:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001d72:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d74:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001d78:	609a      	str	r2, [r3, #8]
      break;
 8001d7a:	e7e6      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d7c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d7e:	684d      	ldr	r5, [r1, #4]
 8001d80:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d82:	f024 0410 	bic.w	r4, r4, #16
 8001d86:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d88:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d8c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d94:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d98:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d9c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d9e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001da0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001da2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001da6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e7cd      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001dae:	2002      	movs	r0, #2
}
 8001db0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001db2:	2c10      	cmp	r4, #16
 8001db4:	d004      	beq.n	8001dc0 <HAL_TIM_ConfigClockSource+0xd0>
 8001db6:	d93d      	bls.n	8001e34 <HAL_TIM_ConfigClockSource+0x144>
 8001db8:	2c20      	cmp	r4, #32
 8001dba:	d001      	beq.n	8001dc0 <HAL_TIM_ConfigClockSource+0xd0>
 8001dbc:	2c30      	cmp	r4, #48	; 0x30
 8001dbe:	d1c4      	bne.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8001dc0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dc2:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dca:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8001dcc:	609c      	str	r4, [r3, #8]
 8001dce:	e7bc      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001dd0:	2c50      	cmp	r4, #80	; 0x50
 8001dd2:	d1ba      	bne.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8001dd4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd8:	684c      	ldr	r4, [r1, #4]
 8001dda:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ddc:	f026 0601 	bic.w	r6, r6, #1
 8001de0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001de2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001de4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001df0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001df4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001df6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001df8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dfc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e7a2      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8001e04:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e06:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e08:	684c      	ldr	r4, [r1, #4]
 8001e0a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e0c:	f026 0601 	bic.w	r6, r6, #1
 8001e10:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e12:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e14:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e1c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e20:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e24:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001e26:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e2c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	e78a      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d0c3      	beq.n	8001dc0 <HAL_TIM_ConfigClockSource+0xd0>
 8001e38:	e787      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x5a>
 8001e3a:	bf00      	nop

08001e3c <HAL_TIM_PeriodElapsedCallback>:
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <HAL_TIM_OC_DelayElapsedCallback>:
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <HAL_TIM_IC_CaptureCallback>:
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <HAL_TIM_TriggerCallback>:
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e4c:	6803      	ldr	r3, [r0, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	0791      	lsls	r1, r2, #30
{
 8001e52:	b510      	push	{r4, lr}
 8001e54:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e56:	d502      	bpl.n	8001e5e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	0792      	lsls	r2, r2, #30
 8001e5c:	d45f      	bmi.n	8001f1e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	0750      	lsls	r0, r2, #29
 8001e62:	d502      	bpl.n	8001e6a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	0751      	lsls	r1, r2, #29
 8001e68:	d446      	bmi.n	8001ef8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	0712      	lsls	r2, r2, #28
 8001e6e:	d502      	bpl.n	8001e76 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	0710      	lsls	r0, r2, #28
 8001e74:	d42e      	bmi.n	8001ed4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	06d2      	lsls	r2, r2, #27
 8001e7a:	d502      	bpl.n	8001e82 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	06d0      	lsls	r0, r2, #27
 8001e80:	d418      	bmi.n	8001eb4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	07d1      	lsls	r1, r2, #31
 8001e86:	d502      	bpl.n	8001e8e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	07d2      	lsls	r2, r2, #31
 8001e8c:	d45d      	bmi.n	8001f4a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	0610      	lsls	r0, r2, #24
 8001e92:	d502      	bpl.n	8001e9a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	0611      	lsls	r1, r2, #24
 8001e98:	d45f      	bmi.n	8001f5a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	0652      	lsls	r2, r2, #25
 8001e9e:	d502      	bpl.n	8001ea6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	0650      	lsls	r0, r2, #25
 8001ea4:	d461      	bmi.n	8001f6a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	0691      	lsls	r1, r2, #26
 8001eaa:	d502      	bpl.n	8001eb2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	0692      	lsls	r2, r2, #26
 8001eb0:	d443      	bmi.n	8001f3a <HAL_TIM_IRQHandler+0xee>
}
 8001eb2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb4:	f06f 0210 	mvn.w	r2, #16
 8001eb8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ebc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec6:	d064      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec8:	f7ff ffbc 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	7722      	strb	r2, [r4, #28]
 8001ed2:	e7d6      	b.n	8001e82 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed4:	f06f 0208 	mvn.w	r2, #8
 8001ed8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eda:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001edc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ede:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee4:	d152      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	f7ff ffab 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7fe fe90 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	7722      	strb	r2, [r4, #28]
 8001ef6:	e7be      	b.n	8001e76 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001efe:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f00:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f02:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001f08:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0a:	d13c      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0c:	f7ff ff98 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7fe fe7d 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	2200      	movs	r2, #0
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	7722      	strb	r2, [r4, #28]
 8001f1c:	e7a5      	b.n	8001e6a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1e:	f06f 0202 	mvn.w	r2, #2
 8001f22:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f24:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f28:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	d025      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	f7ff ff89 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	2200      	movs	r2, #0
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	7722      	strb	r2, [r4, #28]
 8001f38:	e791      	b.n	8001e5e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f3a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001f3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f40:	611a      	str	r2, [r3, #16]
}
 8001f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001f46:	f000 b869 	b.w	800201c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f4a:	f06f 0201 	mvn.w	r2, #1
 8001f4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff ff73 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	e799      	b.n	8001e8e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f60:	4620      	mov	r0, r4
 8001f62:	f000 f85d 	bl	8002020 <HAL_TIMEx_BreakCallback>
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	e797      	b.n	8001e9a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff ff69 	bl	8001e48 <HAL_TIM_TriggerCallback>
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	e795      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	f7ff ff61 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7fe fe46 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f84:	e7d5      	b.n	8001f32 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	f7ff ff5d 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001f8a:	e7c4      	b.n	8001f16 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8c:	f7ff ff5a 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e7ae      	b.n	8001ef0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	f7ff ff55 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe fe3a 	bl	8000c10 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f9c:	e796      	b.n	8001ecc <HAL_TIM_IRQHandler+0x80>
 8001f9e:	bf00      	nop

08001fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fa0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d032      	beq.n	800200e <HAL_TIMEx_MasterConfigSynchronization+0x6e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fa8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001faa:	2202      	movs	r2, #2
{
 8001fac:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8001fae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001fb2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb4:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb6:	4d17      	ldr	r5, [pc, #92]	; (8002014 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
  tmpsmcr = htim->Instance->SMCR;
 8001fb8:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fbe:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8001fc2:	f04f 0601 	mov.w	r6, #1
 8001fc6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8001fca:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fcc:	d011      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8001fd4:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8001fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8001fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8001fea:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d104      	bne.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ff2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ff4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ff8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ffa:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001ffc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ffe:	2201      	movs	r2, #1
 8002000:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002004:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002008:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800200a:	4618      	mov	r0, r3
}
 800200c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800200e:	2002      	movs	r0, #2
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400

0800201c <HAL_TIMEx_CommutCallback>:
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <HAL_TIMEx_BreakCallback>:
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002024:	2800      	cmp	r0, #0
 8002026:	f000 8093 	beq.w	8002150 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800202e:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002030:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002034:	4604      	mov	r4, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8085 	beq.w	8002146 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800203c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002040:	2224      	movs	r2, #36	; 0x24
 8002042:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002046:	68d8      	ldr	r0, [r3, #12]
 8002048:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800204c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002050:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002052:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002054:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002056:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800205a:	4329      	orrs	r1, r5
 800205c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800205e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002060:	6965      	ldr	r5, [r4, #20]
 8002062:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002064:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002068:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800206a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800206e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	69a1      	ldr	r1, [r4, #24]
 8002078:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800207c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800207e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002082:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002084:	4a36      	ldr	r2, [pc, #216]	; (8002160 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002086:	d034      	beq.n	80020f2 <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002088:	4293      	cmp	r3, r2
 800208a:	d063      	beq.n	8002154 <HAL_UART_Init+0x130>
 800208c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002090:	4293      	cmp	r3, r2
 8002092:	d05f      	beq.n	8002154 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002094:	f7ff fc0c 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	4d32      	ldr	r5, [pc, #200]	; (8002164 <HAL_UART_Init+0x140>)
 800209c:	2219      	movs	r2, #25
 800209e:	fba0 0102 	umull	r0, r1, r0, r2
 80020a2:	009a      	lsls	r2, r3, #2
 80020a4:	0f9b      	lsrs	r3, r3, #30
 80020a6:	f7fe f897 	bl	80001d8 <__aeabi_uldivmod>
 80020aa:	fba5 2100 	umull	r2, r1, r5, r0
 80020ae:	0949      	lsrs	r1, r1, #5
 80020b0:	2264      	movs	r2, #100	; 0x64
 80020b2:	fb02 0211 	mls	r2, r2, r1, r0
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	3232      	adds	r2, #50	; 0x32
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	fba5 0202 	umull	r0, r2, r5, r2
 80020c0:	0109      	lsls	r1, r1, #4
 80020c2:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 80020c6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020d8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020da:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80020de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80020e4:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020ec:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d031      	beq.n	800215a <HAL_UART_Init+0x136>
 80020f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02d      	beq.n	800215a <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 80020fe:	f7ff fbd7 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002102:	6862      	ldr	r2, [r4, #4]
 8002104:	2600      	movs	r6, #0
 8002106:	1892      	adds	r2, r2, r2
 8002108:	f04f 0119 	mov.w	r1, #25
 800210c:	eb46 0306 	adc.w	r3, r6, r6
 8002110:	fba0 0101 	umull	r0, r1, r0, r1
 8002114:	f7fe f860 	bl	80001d8 <__aeabi_uldivmod>
 8002118:	4e12      	ldr	r6, [pc, #72]	; (8002164 <HAL_UART_Init+0x140>)
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	fba6 2100 	umull	r2, r1, r6, r0
 8002120:	094d      	lsrs	r5, r1, #5
 8002122:	2264      	movs	r2, #100	; 0x64
 8002124:	fb02 0215 	mls	r2, r2, r5, r0
 8002128:	00d2      	lsls	r2, r2, #3
 800212a:	3232      	adds	r2, #50	; 0x32
 800212c:	fba6 1202 	umull	r1, r2, r6, r2
 8002130:	0952      	lsrs	r2, r2, #5
 8002132:	f002 0107 	and.w	r1, r2, #7
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800213c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002140:	440a      	add	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	e7c0      	b.n	80020c8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8002146:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800214a:	f7fe fe41 	bl	8000dd0 <HAL_UART_MspInit>
 800214e:	e775      	b.n	800203c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
}
 8002152:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8002154:	f7ff fbbc 	bl	80018d0 <HAL_RCC_GetPCLK2Freq>
 8002158:	e79e      	b.n	8002098 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 800215a:	f7ff fbb9 	bl	80018d0 <HAL_RCC_GetPCLK2Freq>
 800215e:	e7d0      	b.n	8002102 <HAL_UART_Init+0xde>
 8002160:	40011000 	.word	0x40011000
 8002164:	51eb851f 	.word	0x51eb851f

08002168 <__libc_init_array>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4e0d      	ldr	r6, [pc, #52]	; (80021a0 <__libc_init_array+0x38>)
 800216c:	4c0d      	ldr	r4, [pc, #52]	; (80021a4 <__libc_init_array+0x3c>)
 800216e:	1ba4      	subs	r4, r4, r6
 8002170:	10a4      	asrs	r4, r4, #2
 8002172:	2500      	movs	r5, #0
 8002174:	42a5      	cmp	r5, r4
 8002176:	d109      	bne.n	800218c <__libc_init_array+0x24>
 8002178:	4e0b      	ldr	r6, [pc, #44]	; (80021a8 <__libc_init_array+0x40>)
 800217a:	4c0c      	ldr	r4, [pc, #48]	; (80021ac <__libc_init_array+0x44>)
 800217c:	f000 f818 	bl	80021b0 <_init>
 8002180:	1ba4      	subs	r4, r4, r6
 8002182:	10a4      	asrs	r4, r4, #2
 8002184:	2500      	movs	r5, #0
 8002186:	42a5      	cmp	r5, r4
 8002188:	d105      	bne.n	8002196 <__libc_init_array+0x2e>
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002190:	4798      	blx	r3
 8002192:	3501      	adds	r5, #1
 8002194:	e7ee      	b.n	8002174 <__libc_init_array+0xc>
 8002196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800219a:	4798      	blx	r3
 800219c:	3501      	adds	r5, #1
 800219e:	e7f2      	b.n	8002186 <__libc_init_array+0x1e>
 80021a0:	080021e8 	.word	0x080021e8
 80021a4:	080021e8 	.word	0x080021e8
 80021a8:	080021e8 	.word	0x080021e8
 80021ac:	080021ec 	.word	0x080021ec

080021b0 <_init>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr

080021bc <_fini>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr
